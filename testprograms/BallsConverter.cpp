#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long

using namespace std;

class BallsConverter {
public:
	string theGood(vector <string>);
};

string BallsConverter::theGood(vector <string> con) {
	int N=SZ(con);
	int eval[N+1][N+1];

	FOR(row,0,N)
		FOR(col,0,N){
			if('A'<=con[row][col] && con[row][col]<='Z')
				eval[row][col]=con[row][col]-'A';
			else
				eval[row][col]=26+(con[row][col]-'a');
		}

	FOR(fir,0,N)
		FOR(sec,0,N)
			FOR(thr,0,N){
				int val1,val2,val3;

				val1=eval[eval[fir][sec]][thr];
				val2=eval[eval[fir][thr]][sec];
				val3=eval[eval[sec][thr]][fir];

				if(val1!=val2 || val1!=val3 || val2!=val3)
					return "Bad";
			}

	return "Good";
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	BallsConverter *obj;
	string answer;
	obj = new BallsConverter();
	clock_t startTime = clock();
	answer = obj->theGood(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	string p1;

	{
	// ----- test 0 -----
	string t0[] = {"AB","BA"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Good";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"BA","AA"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Bad";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"ACB","CBA","BAC"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Bad";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"AAAA","ABBB","ABCC","ABCD"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Good";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	string t0[] = {"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA","ABCDEFGHIJKLMNOPQRSTUVWXYZabcd","ACEGIKMOQSUWYacACEGIKMOQSUWYac","ADGJMPSVYbADGJMPSVYbADGJMPSVYb","AEIMQUYcCGKOSWaAEIMQUYcCGKOSWa","AFKPUZAFKPUZAFKPUZAFKPUZAFKPUZ","AGMSYAGMSYAGMSYAGMSYAGMSYAGMSY","AHOVcFMTaDKRYBIPWdGNUbELSZCJQX","AIQYCKSaEMUcGOWAIQYCKSaEMUcGOW","AJSbGPYDMVAJSbGPYDMVAJSbGPYDMV","AKUAKUAKUAKUAKUAKUAKUAKUAKUAKU","ALWDOZGRcJUBMXEPaHSdKVCNYFQbIT","AMYGSAMYGSAMYGSAMYGSAMYGSAMYGS","ANaJWFSBObKXGTCPcLYHUDQdMZIVER","AOcMaKYIWGUESCQAOcMaKYIWGUESCQ","APAPAPAPAPAPAPAPAPAPAPAPAPAPAP","AQCSEUGWIYKaMcOAQCSEUGWIYKaMcO","AREVIZMdQDUHYLcPCTGXKbOBSFWJaN","ASGYMASGYMASGYMASGYMASGYMASGYM","ATIbQFYNCVKdSHaPEXMBUJcRGZODWL","AUKAUKAUKAUKAUKAUKAUKAUKAUKAUK","AVMDYPGbSJAVMDYPGbSJAVMDYPGbSJ","AWOGcUMEaSKCYQIAWOGcUMEaSKCYQI","AXQJCZSLEbUNGdWPIBYRKDaTMFcVOH","AYSMGAYSMGAYSMGAYSMGAYSMGAYSMG","AZUPKFAZUPKFAZUPKFAZUPKFAZUPKF","AaWSOKGCcYUQMIEAaWSOKGCcYUQMIE","AbYVSPMJGDAbYVSPMJGDAbYVSPMJGD","AcaYWUSQOMKIGECAcaYWUSQOMKIGEC","AdcbaZYXWVUTSRQPONMLKJIHGFEDCB"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Good";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"AAAAAFAAAAAAAAAAAAAAAAAXAAAAcAAAAAAAAAAnAAAAAAAvAA","ABBBBFBBBBBLBBBBQBBBBBBXYBBBcBBBBBBBBBBnBBBBBBBvwB","ABCCCFCCCCCLMCOCQRCCCCCXYCCCcCCCCCCCCCCnCCCCsCCvwC","ABCDEFGHDDDLMDODQRSDUVWXYDDbcdDfghDDklDnopDrsDDvwx","ABCEEFEEEEELMEOEQRSEUVWXYEEbcEEfEhEEklEnEpEEsEEvwE","FFFFFFFFFFFFFFFFFFFFFFFXFFFFcFFFFFFFFFFFFFFFFFFvFF","ABCGEFGGGGGLMGOGQRSGUVWXYGGbcGGfGhGGklGnGpGGsGGvwG","ABCHEFGHHHHLMHOHQRSHUVWXYHHbcdHfHhHHklHnHpHHsHHvwH","ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwx","ABCDEFGHJJJLMJOJQRSJUVWXYJJbcdJfghJJklJnopJrsJJvwx","ABCDEFGHKJKLMNOPQRSTUVWXYZKbcdefghijklmnopqrsKKvwx","ALLLLFLLLLLLLLLLLLLLLLLXLLLLcLLLLLLLLLLnLLLLLLLvwL","ABMMMFMMMMMLMMOMQMMMMMMXYMMMcMMMMMMMMMMnMMMMMMMvwM","ABCDEFGHNJNLMNOPQRSTUVWXYZNbcdefghijklmnopqrsNNvwx","ABOOOFOOOOOLOOOOQOOOOOOXYOOOcOOOOOOOOOOnOOOOOOOvwO","ABCDEFGHPJPLMPOPQRSTUVWXYZPbcdPfghiPklmnopPrsPPvwx","AQQQQFQQQQQLQQQQQQQQQQQXQQQQcQQQQQQQQQQnQQQQQQQvwQ","ABRRRFRRRRRLMRORQRRRRRRXYRRRcRRRRRRRRRRnRRRRRRRvwR","ABCSSFSSSSSLMSOSQRSSSSSXYSSScSSSSSSSSSSnSSSSsS"
			"SvwS","ABCDEFGHTJTLMTOTQRSTUVWXYTTbcdTfghiTklTnopTrsTTvwx","ABCUUFUUUUULMUOUQRSUUUWXYUUUcUUUUhUUklUnUUUUsUUvwU","ABCVVFVVVVVLMVOVQRSVUVWXYVVbcVVfVhVVklVnVVVVsVVvwV","ABCWWFWWWWWLMWOWQRSWWWWXYWWWcWWWWhWWkWWnWWWWsWWvwW","XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXvXX","AYYYYFYYYYYLYYYYQYYYYYYXYYYYcYYYYYYYYYYnYYYYYYYvwY","ABCDEFGHZJZLMZOZQRSTUVWXYZZbcdZfghiZklZnopZrsZZvwx","ABCDEFGHaJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwx","ABCbbFbbbbbLMbObQRSbUbWXYbbbcbbfbhbbklbnbbbbsbbvwb","cccccccccccccccccccccccXcccccccccccccccccccccccvcc","ABCdEFGddddLMdOdQRSdUVWXYddbcddfdhddkldndpddsddvwd","ABCDEFGHeJeLMeOPQRSTUVWXYZebcdefghijklmnoperseevwx","ABCffFfffffLMfOfQRSfUfWXYfffcffffhffklfnffffsffvwf","ABCgEFGHgggLMgOgQRSgUVWXYggbcdgfghggklgngpggsggvwg","ABChhFhhhhhLMhOhQRShhhhXYhhhchhhhhhhkhhnhhhhshhvwh","ABCDEFGHiJiLMiOiQRSiUVWXYiibcdifghiiklinopirsiivwx","ABCDEFGHjJjLMjOPQRSTUVWXYZjbcdjfghijklmnopjrsjjvwx","ABCkkFkkkkkLMkOkQRSkkkkXYkkkckkkkkkkkkknkkkkskkvwk","ABCllFlllllLMlOlQRSlllWXYlllcllllhllklln"
			"llllsllvwl","ABCDEFGHmJmLMmOmQRSTUVWXYZmbcdmfghimklmnopmrsmmvwx","nnnnnFnnnnnnnnnnnnnnnnnXnnnncnnnnnnnnnnnnnnnnnnvnn","ABCoEFGHoooLMoOoQRSoUVWXYoobcdofghooklonoporsoovwx","ABCppFpppppLMpOpQRSpUVWXYppbcppfphppklpnpppSsppvwp","ABCDEFGHqJqLMqOPQRSTUVWXYZqbcdefghijklmnopqrsqqvwx","ABCrEFGHrrrLMrOrQRSrUVWXYrrbcdrfghrrklrnrSrrsrrvwx","ABsssFsssssLMsOsQRsssssXYssscssssssssssnsssssssvws","ABCDEFGHtJKLMNOPQRSTUVWXYZtbcdefghijklmnopqrsttvwx","ABCDEFGHuJKLMNOPQRSTUVWXYZubcdefghijklmnopqrstuvwx","vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv","AwwwwFwwwwwwwwwwwwwwwwwXwwwwcwwwwwwwwwwnwwwwwwwvww","ABCxEFGHxxxLMxOxQRSxUVWXYxxbcdxfghxxklxnxpxxsxxvwx"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Bad";
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
