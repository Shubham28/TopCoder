#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <bitset>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() );
#define VI vector<int>
#define VL vector<long>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>

using namespace std;

class Champagne {
public:
	string howMuch(int, int, int);
};

string Champagne::howMuch(int height, int no, int units) {
	vector< VD >glass;
	EFOR(r,0,20){
		VD tmp;
		EFOR(c,0,r)
			PB(tmp,0.0);
		PB(glass,tmp);
	}

	glass[0][0]=units+0.0;
	FOR(r,0,height)
		FOR(c,0,glass[r].size()){
			double quant;
			if(glass[r][c]>=2.0){
				quant=glass[r][c]-2.0,glass[r][c]=2.0;
				glass[r+1][c]+=glass[r+1][c+1]+=quant/2.0;
			}
		}

	int R=glass.size(),C=glass[R-1].size();

	FOR(c,0,glass[R-1][C-1]){
		if(glass[R][C]>=2)
			glass[R][C]-=2;
	}

	int row,col;
	--no;
	for(row=0;row<=20 && no-row>=0;row++)
		no-=row;

	col=no,row-=1;
	if(glass[row][col]==0)
		return "0/1";

	double num=glass[row][col]*pow(2.0,20.0),den=pow(2.0,21.0);
	int fNum=int(num+1e-7),fDen=int(den+1e-7);
	
	char buff[20];
	sprintf(buff,"%d/%d",fNum/__gcd(fNum,fDen),fDen/__gcd(fNum,fDen));
	string ans(buff);
	
	return ans;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	Champagne *obj;
	string answer;
	obj = new Champagne();
	clock_t startTime = clock();
	answer = obj->howMuch(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	string p3;
	
	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 1;
	p2 = 1;
	p3 = "1/2";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	p1 = 2;
	p2 = 2;
	p3 = "0/1";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 2;
	p1 = 3;
	p2 = 3;
	p3 = "1/4";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 3;
	p1 = 4;
	p2 = 7;
	p3 = "1/8";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 3;
	p1 = 5;
	p2 = 7;
	p3 = "1/4";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 20;
	p1 = 204;
	p2 = 300;
	p3 = "5581/131072";
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = 20;
	p1 = 204;
	p2 = 299;
	p3 = "8663/262144";
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
