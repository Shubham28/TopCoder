#include <algorithm>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <vector>
#include <map>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define MEM(A,B) memset(A,B,sizeof(A))
#define SZ(A) int(A.size())
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define VI vector<int>
#define VS vector<string>
#define LL long long

using namespace std;

const int MAX=1000000001;

class ImportantSequence {
public:
	int getCount(vector <int>, string);
};

int ImportantSequence::getCount(vector <int> B, string op) {
	if(find(ALL(op),'+')==op.end())
		return -1;

	int N=SZ(op);
	int mn=1;

	int ini=1,nxt;
	FOR(a,0,N){
		if(op[a]=='+')
			nxt=B[a]-ini;
		else 
			nxt=ini-B[a];

		ini=nxt;
		mn<?=ini;
	}
	if(mn<0)
		mn=2-mn;

	int mx=0;
	FOR(i,0,N){
		int fr=((B[i]-5)>?1);
		int to=((B[i]+5)>?1);	cout<<fr<<","<<to<<"\n";

		EFOR(chk,fr,2500){
			ini=chk;
			bool yes=1;
			FOR(a,0,N){
				if(op[a]=='+')
					nxt=B[a]-ini;
				else 
					nxt=ini-B[a];

				if(nxt<=0){
					yes=0;
					break;
				}
				ini=nxt;
			}

			if(yes){
				mn<?=chk;
				mx>?=chk;
			}
		}
	}	cout<<mn<<","<<mx<<"\n";
	return (mn>0 && mx>0)?(mx-mn+1):0;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, string p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	ImportantSequence *obj;
	int answer;
	obj = new ImportantSequence();
	clock_t startTime = clock();
	answer = obj->getCount(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	string p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {3,-1,7};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "+-+";
	p2 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "-";
	p2 = -1;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "+";
	p2 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {10};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "+";
	p2 = 9;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {540,2012,540,2012,540,2012,540};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "-+-+-+-";
	p2 = 1471;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {997,1468,1254};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "-++";
	p2 = 262;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	int t0[] = {1,1636,996,684,414,774,1434,986,580,1059,1571,1339,-609};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "-+++-+++++++-";
	p2 = 269;
	all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
