#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define MEM(A,B) memset(A,B,sizeof(A))
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long

using namespace std;

class NewItemShopTwo {
public:
	double getMaximum(vector <string>);

	double hr[24],scr[24],prb[24];
	int cust[24];
	int L;
	bool visited[2];
	double tot[2];

	double allPosb(int ind) {
		if(ind==L)		return 0;

		int now=cust[ind];

	//	Already came
		if(visited[now])
			return allPosb(ind+1);

	//	Comes for the 1st time

		// Sells the sword
		double sold=scr[ind]*prb[ind];

		// Rejects the offer
		visited[now]=1;
		double rej=prb[ind]*allPosb(ind+1);
		visited[now]=0;

	//	Doesn't come
		double nxt=(1-prb[ind])*allPosb(ind+1);

		return nxt+(sold>?rej);
	}
};

double NewItemShopTwo::getMaximum(vector <string> data) {
	L=0;
	tot[0]=tot[1]=100;

	FOR(i,0,2){
		FOR(p,0,SZ(data[i]))
			if(data[i][p]==',')
				data[i][p]=' ';

		stringstream brk(data[i]);
		int fr,sc,th;

		while(brk>>fr>>sc>>th){
			hr[L]=fr,scr[L]=sc,prb[L]=th/tot[i];
			tot[i]-=th;
			cust[L++]=i;
		}
	}

	FOR(i,0,L)
		FOR(j,i+1,L)
			if(hr[i]>hr[j]){
				swap(hr[i],hr[j]);		swap(scr[i],scr[j]);	swap(prb[i],prb[j]);
				swap(cust[i],cust[j]);
		}

	MEM(visited,0);
	double ans=allPosb(0);
	return ans;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, double p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	NewItemShopTwo *obj;
	double answer;
	obj = new NewItemShopTwo();
	clock_t startTime = clock();
	answer = obj->getMaximum(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p1 - answer) <= 1e-9 * max(1.0, fabs(p1));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	double p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"8,1,80 16,100,11","12,10,100"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 19.0;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"8,1,80 16,100,11","12,10,90 13,30,5"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 19.4;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"0,90,25 2,90,25 4,90,25 6,90,25","7,100,80"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 90.0;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"0,90,25 2,90,25 4,90,25 6,90,25","7,100,95"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 95.0;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"0,3,1 2,4,1 4,5,9 6,2,6 8,5,3 10,5,8 12,9,7 14,9,3","1,2,3 3,8,4 5,6,2 7,6,4 9,3,3 11,8,3 13,2,7 15,9,5"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3.0692999999999997;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
