#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long

using namespace std;

class BatchSystemRoulette {
public:
	vector <double> expectedFinishTimes(vector <int>, vector <string>);
};

vector <double> BatchSystemRoulette::expectedFinishTimes(vector <int> duration, vector <string> user) {
	int N=SZ(duration);
	map<string,LL>userDur;
	FOR(i,0,N)
		userDur[user[i]]+=duration[i];

	VD res(N);
	FOR(i,0,N){
		int eqn=0;
		double before=0;

		for(map<string,LL>::iterator itdur=userDur.begin();itdur!=userDur.end();itdur++){
			if(itdur->second<userDur[user[i]])
				before+=itdur->second;
			else if(itdur->second==userDur[user[i]])
				++eqn;
        }

/*	Expected Time = Waiting time by users with lower total durations
				+	Waiting time caused by users with the same total duration
				+	Waiting time caused by jobs from the same user

 	C: userDur[user[i]], K: Jobs caused by the user

	Waiting time by users with same total duration =
		Σ (Ways to place a user at all positions/Total Ways) * Waiting time at that position
		= ((eqn-1)!/eqn!)*(0+C+2*C+3*C .... (eqn-1)*C)

	Waiting time caused by jobs from the same user =
		For each of the K-1 other jobs, there is a 1/2 probability that the job will be before & 1/2 probability, it will be after.
		= Σ( (1/2)*(duration for all other jobs)
*/
		res[i]=before+(eqn-1)*userDur[user[i]]/2.0 + (userDur[user[i]]-duration[i])/2.0 +duration[i];
    }
    return res;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <string> p1, bool hasAnswer, vector <double> p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	BatchSystemRoulette *obj;
	vector <double> answer;
	obj = new BatchSystemRoulette();
	clock_t startTime = clock();
	answer = obj->expectedFinishTimes(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p2[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != answer[i] || fabs(p2[i] - answer[i]) > 1e-9 * max(1.0, fabs(p2[i]))) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <string> p1;
	vector <double> p2;
	
	{
	// ----- test 0 -----
	int t0[] = {3,2,4,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"Gil Grissom","Sarah Sidle","Warrick Brown","Catherine Willows"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	double t2[] = {6.0,3.0,10.0,1.0};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {3,2,4,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"mac taylor","Mac Taylor","Mac Taylor","Peyton Driscoll"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	double t2[] = {4.0,8.0,9.0,1.0};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {13,14,15,56,56};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"Tim Speedle","Tim Speedle","Tim Speedle","Horatio Caine","YEEEAAAAAAAAAAH"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	double t2[] = {27.5,28.0,28.5,126.0,126.0};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
