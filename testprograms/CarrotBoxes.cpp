#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define MEM(A,B) memset(A,B,sizeof(A))
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long

using namespace std;

class CarrotBoxes {
public:
	double theProbability(vector <string>);
};

double CarrotBoxes::theProbability(vector <string> infr) {
	int N=SZ(infr);
	bool cnct[N+1][N+1];
	MEM(cnct,0);

	FOR(i,0,N)	FOR(j,0,N)
		cnct[i][j]=(infr[i][j]=='Y');

	FOR(k,0,N)
		FOR(i,0,N)	FOR(j,0,N)
		    cnct[i][j]|=(cnct[i][k] && cnct[k][j]);

	int top[N+1];
	int tn=0;

	bool tried[N+1];
	MEM(tried,0);

	FOR(i,0,N)
		if(!tried[i]){
			FOR(j,0,N)
				if(cnct[i][j] && cnct[j][i])
					tried[j]=1;

			int inDeg=0;
			FOR(j,0,N)
				if(cnct[j][i]  && !cnct[i][j])
					inDeg++;

			if(inDeg==0)
				top[tn++]=i;
		}

	FOR(l,0,tn){
		int last=top[l];

		bool open[N+1];
		MEM(open,0);

		FOR(j,0,tn)
			if(j!=l)
				FOR(k,0,N)
					if(cnct[top[j]][k])
						open[k]=1;

		bool ok=1;
		FOR(j,0,N)
			if((j!=last) && !open[j])
	            ok=0;

		if(ok)
       		return (N-(tn-1))/(double)N;
	}

	return (N-tn)/(double)N;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, double p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i=0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	CarrotBoxes *obj;
	double answer;
	obj=new CarrotBoxes();
	clock_t startTime=clock();
	answer=obj->theProbability(p0);
	clock_t endTime=clock();
	delete obj;
	bool res;
	res=true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res=answer == answer && fabs(p1 - answer) <= 1e-9 * max(1.0, fabs(p1));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res=false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right=true;
	
	vector <string> p0;
	double p1;
	
	{
	// ----- test 0 -----
	string t0[]={"YYYYY","NYNNN","NNYNN","NNNYN","NNNNY"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1=0.8;
	all_right=KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[]={"YNNNN","NYNNN","NNYNN","NNNYN","NNNNY"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1=0.2;
	all_right=KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[]={"Y"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1=1.0;
	all_right=KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[]={"YNNNN","YYNNN","YNYNN","NNNYY","NNNYY"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1=0.6;
	all_right=KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[]={"YYYNNNYN","NYNNNNYN","NNYNNNNN","NYNYNNNN","YNNNYNNY","NNYNNYNN","NNNNYNYN","NNYNNNNY"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1=0.875;
	all_right=KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[]={"YNNNNNNNNYNNNNNNNNNN","NYNNNNNNNNNNNNNNNNNN","NNYNNNNNNNYNNNNNYNNN","NNNYNYNNNNNNNNYNNNNN","NNNNYNNNNNNNNNYNNNNY","NNNNNYNNNNNNNNNNNNNY","NNNNYNYNYNNNNNNNNNNN","NNNNNNNYNNNYYNNNNNNN","NNNNNNNNYNNNNNNNNNNN","YNNNNNNNNYNNNNNYNNNN","NNNNNNNNNNYNNNNNNNNN","NYNNNNNNNNNYNNNNNNNN","NNNNNNNYNNNNYNNNNNNN","NNNNNNNNNNNNNYNNNYNN","NNNNNNNNNNNYNNYNNNYN","NYNNNNNNNNNNNNNYNNNN","NNYNNNNNNNNNNNNNYNNN","NNNNNNNNNNNNNYNYNYNN","NNNNNNNNYNYNNNNNNNYY","NNNYNNNNNNNNNNNNNNNY"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1=0.75;
	all_right=KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
