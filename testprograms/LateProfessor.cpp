#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <bitset>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() );
#define VI vector<int>
#define VL vector<long>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>

using namespace std;

class LateProfessor {
public:
	double getProbability(int, int, int, int, int);
};

double LateProfessor::getProbability(int wtT, int wkT, int ltT, int btAr, int wtAr) {
	int tot=wtT+wkT;

	if(btAr==wtAr){
		int tmp=btAr%tot;
		return (tmp<=wtT || tmp>tot-ltT)?0.0:1.0;
	}

	int unfav=0,den=wtAr-btAr;

	EFOR(cl,btAr+1,wtAr){
		int close=cl%tot;

		if(close>wtT && close<=tot-ltT)
			++unfav;
	}
	return double(unfav)/double(den);
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, bool hasAnswer, double p5) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << p4;
	cout << "]" << endl;
	LateProfessor *obj;
	double answer;
	obj = new LateProfessor();
	clock_t startTime = clock();
	answer = obj->getProbability(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p5 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p5 - answer) <= 1e-9 * max(1.0, fabs(p5));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	double p5;
	
	{
	// ----- test 0 -----
	p0 = 20;
	p1 = 30;
	p2 = 10;
	p3 = 0;
	p4 = 50;
	p5 = 0.4;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 20;
	p1 = 30;
	p2 = 10;
	p3 = 30;
	p4 = 100;
	p5 = 0.42857142857142855;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 20;
	p1 = 40;
	p2 = 50;
	p3 = 0;
	p4 = 300;
	p5 = 0.0;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 101;
	p1 = 230;
	p2 = 10;
	p3 = 654;
	p4 = 17890;
	p5 = 0.6637270828498492;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 20;
	p1 = 30;
	p2 = 10;
	p3 = 90;
	p4 = 90;
	p5 = 1.0;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 1000;
	p1 = 600;
	p2 = 1;
	p3 = 17000;
	p4 = 17000;
	p5 = 0.0;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = 120000;
	p1 = 180000;
	p2 = 150000;
	p3 = 600000;
	p4 = 1400000;
	p5 = .1125;
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	p0 = 20000;
	p1 = 30000;
	p2 = 10000;
	p3 = 30000;
	p4 = 30001;
	p5 = 1.0;
	all_right = KawigiEdit_RunTest(7, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 8 -----
	p0 = 20;
	p1 = 30;
	p2 = 10;
	p3 = 91;
	p4 = 91;
	p5 = 0.0;
	all_right = KawigiEdit_RunTest(8, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 9 -----
	p0 = 13;
	p1 = 16;
	p2 = 2;
	p3 = 676576;
	p4 = 676595;
	p5 = 0.631578947368421;
	all_right = KawigiEdit_RunTest(9, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}	system("pause");
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
