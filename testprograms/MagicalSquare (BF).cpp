#include <algorithm>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <sstream>
#include <vector>
#include <map>
#include <queue>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define SZ(A) int(A.size())
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define MEM(A,B) memset(A,B,sizeof(A))
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define LL long long

using namespace std;

class MagicalSquare {
public:
	long long getCount(vector <string>, vector <string>);
};

long long MagicalSquare::getCount(vector <string> rwSt, vector <string> clSt) {
	int ans=0;

	EFOR(ln1,0,SZ(rwSt[0])){
		bool mt=1;
		FOR(ps,0,ln1)
			if(ln1>SZ(clSt[0]) || rwSt[0][ps]!=clSt[0][ps]){
				mt=0;
				break;
			}

		if(!mt)		continue;

		for(int ln2=0;ln1+ln2<=SZ(rwSt[0]);ln2++){
			mt=1;
			FOR(ps,0,ln2)
				if(ln2>SZ(clSt[1]) || rwSt[0][ln1+ps]!=clSt[1][ps]){
					mt=0;
					break;
				}

			if(!mt)		continue;

			int ln3=SZ(rwSt[0])-ln1-ln2;
			FOR(ps,0,ln3)
				if(ln3>SZ(clSt[2]) || rwSt[0][ln1+ln2+ps]!=clSt[2][ps]){
					mt=0;
					break;
				}

			if(!mt)		continue;

			EFOR(ln4,0,SZ(rwSt[1])){
				mt=1;
				FOR(ps,0,ln4)
					if(ln1+ln4>SZ(clSt[0]) || rwSt[1][ps]!=clSt[0][ln1+ps]){
						mt=0;
						break;
					}

				if(!mt)		continue;

				for(int ln5=0;ln4+ln5<=SZ(rwSt[1]);ln5++){
					mt=1;
					FOR(ps,0,ln5)
						if(ln2+ln5>SZ(clSt[1]) || rwSt[1][ln4+ps]!=clSt[1][ln2+ps]){
							mt=0;
							break;
						}

					if(!mt)		continue;

					int ln6=SZ(rwSt[1])-ln4-ln5;
					FOR(ps,0,ln6)
						if(ln3+ln6>SZ(clSt[2]) || rwSt[1][ln4+ln5+ps]!=clSt[2][ln3+ps]){
							mt=0;
							break;
						}

					if(!mt)		continue;

					int ln7=SZ(clSt[0])-ln1-ln4;
					FOR(ps,0,ln7)
						if(ln7>SZ(rwSt[2]) || rwSt[2][ps]!=clSt[0][ln1+ln4+ps]){
							mt=0;
							break;
						}

					if(!mt)		continue;

					int ln8=SZ(clSt[1])-ln2-ln5;
					FOR(ps,0,ln8)
						if(ln7+ln8>SZ(rwSt[2]) || rwSt[2][ln7+ps]!=clSt[1][ln2+ln5+ps]){
							mt=0;
							break;
						}

					int ln9=SZ(clSt[2])-ln3-ln6;

					if(!mt || ln7+ln8+ln9!=SZ(rwSt[2]))		continue;

					FOR(ps,0,ln9)
						if(rwSt[2][ln7+ln8+ps]!=clSt[2][ln3+ln6+ps]){
							mt=0;
							break;
						}

					if(!mt)		continue;
					else
						++ans;
				}
			}
		}
	}
	return ans;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	MagicalSquare *obj;
	long long answer;
	obj = new MagicalSquare();
	clock_t startTime = clock();
	answer = obj->getCount(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	long long p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"f","o","x"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"f","o","x"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"x","x","x"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"x","","xx"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"cd","cd","cd"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"dvd","dvd","dvd"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"abab","ab","abab"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"abab","ab","abab"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 11ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"qwer","asdf","zxcv"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"qaz","wsx","erdfcv"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"xx","xxx","xx"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"xx","xx","xx"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0ll;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
