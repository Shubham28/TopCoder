#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <bitset>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long

using namespace std;

class ActivateGame {
public:
	int findMaxScore(vector <string>);
	int score(VS &grid,int iniR,int iniC,int finR,int finC) {
		VI row,col,val;
		PB(row,iniR);
		PB(row,finR);
		PB(col,iniC);
		PB(col,finC);

		EFOR(chk,0,1){
			char let=grid[row[chk]][col[chk]];
			if('0'<=let && let<='9'){
				PB(val,grid[row[chk]][col[chk]]-'0');
			} else if('a'<=let && let<='z') {
				PB(val,10+let-'a');
			} else if('A'<=let && let<='Z')
				PB(val,36+let-'A');
		}
		return abs(val[1]-val[0]);
	}
};

int ActivateGame::findMaxScore(vector <string> grid) {
	int R=grid.size(),C=grid[0].size();
	vector< VB >active(R,VB(C,false));

	int fin=0;
	active[0][0]=true;
	int mX[]={-1,0,0,1};
	int mY[]={0,-1,1,0};


	EFOR(tim,1,R*C-1){
		int tmp=-9999999;
		int newR,newC;

		FOR(row,0,R)
			FOR(col,0,C)
				if(active[row][col]){
					FOR(move,0,4){
						int rF=row+mX[move],cF=col+mY[move];
						if(0<=rF && rF<R && 0<=cF && cF<C && !active[rF][cF]){
							int fnd=score(grid,row,col,rF,cF);
							if(tmp<fnd)
								tmp=fnd,newR=rF,newC=cF;
						}
					}
				}

		active[newR][newC]=true;
		fin+=tmp;
	}
	return fin;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	ActivateGame *obj;
	int answer;
	obj = new ActivateGame();
	clock_t startTime = clock();
	answer = obj->findMaxScore(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"05","aB"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 69;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"03","21"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 7;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {"John","Brus","Gogo"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 118;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"AAA","AAA","AAA"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
