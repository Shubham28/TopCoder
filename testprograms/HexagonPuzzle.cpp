#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define MEM(A,B) memset(A,B,sizeof(A))
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long

using namespace std;

int dr[6][3]={ {0,1,1},{-1,0,0},{-1,0,0} , {0,0,1},{0,0,1},{-1,-1,0} };
int dc[6][3]={ {0,0,1},{0,0,1},{-1,-1,0} , {0,1,1},{-1,0,0},{-1,0,0} };

using namespace std;

class HexagonPuzzle {
public:
	int theCount(vector <string>);
	VS brd;
	int N,MOD;
	LL fac[51*51];
	bool vist[51][51];

	int ways(int r,int c) {
		if(vist[r][c])		return 0;

		vist[r][c]=1;
		int cnt=1;
		FOR(el,0,6){
			bool ok=1;
			FOR(chk,0,3){
				int tr=r+dr[el][chk];
				int tc=c+dc[el][chk];

				if(tr==r && tc==c)		continue;
				if(tr<0 || tc<0 || tc>tr || tr>=N || tc>=N || brd[tr][tc]=='X'){
					ok=0;
					break;
				}
			}

			if(ok)
				FOR(chk,0,3){
					int tr=r+dr[el][chk];
					int tc=c+dc[el][chk];

					if(tr==r && tc==c)		continue;
					if(!vist[tr][tc])
						cnt+=ways(tr,tc);
				}
		}
		return cnt;
	}
};

int HexagonPuzzle::theCount(vector <string> board) {
	brd=board,N=SZ(brd),MOD=1000000007;
	MEM(vist,0);

	fac[0]=1,fac[1]=fac[2]=1;
	EFOR(f,3,N*N)	fac[f]=(fac[f-1]*f)%MOD;

	LL ret=1;
	FOR(r,0,N)		EFOR(c,0,r)
		if(!vist[r][c] && brd[r][c]!='X'){
			int tmp=ways(r,c);
			if(tmp)
				ret=(ret*(LL)fac[tmp])%MOD;
		}

	return ret;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	HexagonPuzzle *obj;
	int answer;
	obj = new HexagonPuzzle();
	clock_t startTime = clock();
	answer = obj->theCount(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {".",".X","X..",".X.X"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"X"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {".","..","...",".X.."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 20160;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {".","..","XXX","..X.",".X..X","XXXX..","..X.X.X","..X.XX.."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 108;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {".","..","...","....",".....","......",".......","........"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 261547992;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {".","..","X..","X..X","X....","X.....","....X..","...XXX.."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 697067110;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
