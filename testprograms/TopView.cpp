#include <algorithm>
#include <iostream>
#include <vector>
#include <map>
#include <list>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define MEM(A,B) memset(A,B,sizeof(A))
#define SZ(A) int(A.size())
#define PB(A,B) A.push_back(B);
#define PII pair<int,int>

using namespace std;

class TopView {
public:
	string findOrder(vector <string>);
};

string TopView::findOrder(vector <string> grid) {
	int R,C,T;
	bool grph[80][80];

	map<char,int>conv;
	map<int, vector<PII > >ocr;
	char rconv[70];

	R=SZ(grid),C=SZ(grid[0]);
	MEM(grph,0);

	FOR(i,0,R)		FOR(j,0,C){
		if(grid[i][j]!='.')
			conv[grid[i][j]]=0;
		else
			grid[i][j]='{';					//	Has ASCII >62
	}

	T=0;
	for(map<char,int>::iterator it=conv.begin();it!=conv.end();it++){
		char ch=(*it).first;
		conv[ch]=T,rconv[T++]=ch;
	}

	FOR(i,0,R)		FOR(j,0,C)
		if(grid[i][j]!='{'){
			grid[i][j]=conv[grid[i][j]];
			PB(ocr[grid[i][j]],PII(i,j));
		}

	for(map<int, vector<PII > >::iterator it=ocr.begin();it!=ocr.end();it++){
		vector< PII >lst=(*it).second;
		int top=lst[0].first,botm=lst[0].first;
		int lft=lst[0].second,rt=lst[0].second;

		FOR(a,1,SZ(lst)){
			top<?=lst[a].first,botm>?=lst[a].first;
			lft<?=lst[a].second,rt>?=lst[a].second;
		}

		EFOR(rw,top,botm)		EFOR(cl,lft,rt){
			if(grid[rw][cl]=='{')
				return "ERROR!";

			if(grid[rw][cl]!=(*it).first)
				grph[(*it).first][grid[rw][cl]]=1;
		}
	}

	string res;
	bool remv[80];
	MEM(remv,0);

	FOR(ps,0,T){
		PII bst=PII(T,-1);

		FOR(j,0,T)
			if(!remv[j]){
				bool can=1;
				FOR(k,0,T)
					can&=(remv[k] || !grph[k][j]);

				if(can){
					bst=PII(j,j);
					break;
				}
			}

		if(bst.second==-1)
			return "ERROR!";

		res+=(char)rconv[bst.first];
		remv[bst.second]=1;
	}
	return res;

}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <string>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	TopView *obj;
	string answer;
	obj = new TopView();
	clock_t startTime = clock();
	answer = obj->findOrder(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	string p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"..AA..",".CAAC.",".CAAC."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "CA";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"..47..","..74.."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "ERROR!";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"bbb666",".655X5","a65AA5","a65AA5","a65555"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "65AXab";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"aabbaaaaaaaaaaaaaaaaaa","aabbccccccccccccccaaaa","aab11111ccccccccccaaaa","aab12221ccccccccccaaaa","aab12221ccccccccccaaaa","aab12221ccccccccccaaaa","aab12221ccccccccccaaaa","aab12221ccccccccccaaaa","aab12221ddddddddddaaaa","aab13331DDDDDDDDDDaaaa","aab13331DDDDDDDDDDaaaa","aa.11111DDDDDDDDDDaaaa","aaaaaaaaaaaaaaaaaaaaaa"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "ERROR!";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
