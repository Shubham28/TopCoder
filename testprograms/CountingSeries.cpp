#include <algorithm>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <sstream>
#include <vector>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define SZ(A) int(A.size())
#define PB(A,B) A.push_back(B);
#define VI vector<int>
#define LL long long

using namespace std;

class CountingSeries {
public:
	long long countThem(long long, long long, long long, long long, long long);
};

long long CountingSeries::countThem(long long a, long long b, long long c, long long d, long long U) {
	LL AP=0;
	if(U>=a)		AP=1+(U-a)/b;

	if(U<c)		return AP;
	if(d==1){
		if((c-a)%b==0 && (c-a)/b>=0)		return AP;
		else		return AP+1;
	}

	LL GP=0;
	if(U==c)		GP=1;
	else			GP=(LL)(1+1e-13+(log(U+0.l)-log(c+0.l))/log(d+0.l));

	LL sub=0;
	for(int Y=0;log(c+0.l)+Y*log(d+0.l)<=log(U+0.l);Y++){

		LL val=c*(LL)(pow(d+0.l,Y)+1e-13)-a;
		if(val%b==0 && val>=0)
			++sub;
	}

	return (AP+GP-sub);
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, long long p0, long long p1, long long p2, long long p3, long long p4, bool hasAnswer, long long p5) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << p4;
	cout << "]" << endl;
	CountingSeries *obj;
	long long answer;
	obj = new CountingSeries();
	clock_t startTime = clock();
	answer = obj->countThem(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p5 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p5;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	long long p0;
	long long p1;
	long long p2;
	long long p3;
	long long p4;
	long long p5;
	
	{
	// ----- test 0 -----
	p0 = 1ll;
	p1 = 1ll;
	p2 = 1ll;
	p3 = 2ll;
	p4 = 1000ll;
	p5 = 1000ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3ll;
	p1 = 3ll;
	p2 = 1ll;
	p3 = 2ll;
	p4 = 1000ll;
	p5 = 343ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 40ll;
	p1 = 77ll;
	p2 = 40ll;
	p3 = 100000ll;
	p4 = 40ll;
	p5 = 1ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 452ll;
	p1 = 24ll;
	p2 = 4ll;
	p3 = 5ll;
	p4 = 600ll;
	p5 = 10ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 234ll;
	p1 = 24ll;
	p2 = 377ll;
	p3 = 1ll;
	p4 = 10000ll;
	p5 = 408ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 25ll;
	p1 = 4ll;
	p2 = 100ll;
	p3 = 1000ll;
	p4 = 5ll;
	p5 = 0ll;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = 1ll;
	p1 = 1ll;
	p2 = 20ll;
	p3 = 5ll;
	p4 = 10ll;
	p5 = 10ll;
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	p0 = 25ll;
	p1 = 10ll;
	p2 = 35ll;
	p3 = 1ll;
	p4 = 35ll;
	p5 = 2ll;
	all_right = KawigiEdit_RunTest(7, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 8 -----
	p0 = 25ll;
	p1 = 10ll;
	p2 = 30ll;
	p3 = 1ll;
	p4 = 50ll;
	p5 = 4ll;
	all_right = KawigiEdit_RunTest(8, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 9 -----
	p0 = 25ll;
	p1 = 10ll;
	p2 = 5ll;
	p3 = 5ll;
	p4 = 100ll;
	p5 = 9ll;
	all_right = KawigiEdit_RunTest(9, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
