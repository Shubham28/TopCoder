#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long

using namespace std;

// Uses 'fetetriste' Idea

class RectangularIsland {
public:
	double theProbablity(int, int, int, int, int);

/*	Calculated Probability of moving 'steps' no. of moves in the 1-D Space 'range' with
 *	initial position 'pos'. Returns probabilities of moving 1 to 'steps' number of moves with 'pos' */

	VD solveoneD(int steps, int pos, int range){
		vector< VD >prob(steps+1,VD(range,0));
		prob[0][pos]=1.0;

		FOR(move,0,steps)
			FOR(ind,0,range){
				if(ind>=1)													// Move left/down
					prob[move+1][ind-1]+=(0.5*prob[move][ind]);
				if(ind<range-1)												// Move right/up
					prob[move+1][ind+1]+=(0.5*prob[move][ind]);
			}

		VD ret(steps+1,0);
		FOR(move,0,steps+1)
			FOR(ind,0,range)
				ret[move]+=prob[move][ind];

		return ret;
	}
};

double RectangularIsland::theProbablity(int wid, int height, int x, int y, int steps) {
	VD hor=solveoneD(steps,x,wid);
	VD vert=solveoneD(steps,y,height);

	vector< VD >nCr(2,VD(steps+1,0));						// DP with 2 states for Memory-Efficiency
	nCr[0][0]=1;											// Uses (n-1)C(r-1)+(n-1)Cr = nCr

	int chn=0;
	FOR(move,0,steps){
		int fir=chn,sec=1-chn;
		nCr[sec].assign(move+1,0);

		EFOR(sum,0,move){
			nCr[sec][sum]+=(0.5*nCr[fir][sum]);
			nCr[sec][sum+1]+=(0.5*nCr[fir][sum]);
		}
		chn+=1,chn%=2;
	}

	double ans=0;
	EFOR(movhor,0,steps)
		ans+=(nCr[chn][movhor]*hor[movhor]*vert[steps-movhor]);
	return ans;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, bool hasAnswer, double p5) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << p4;
	cout << "]" << endl;
	RectangularIsland *obj;
	double answer;
	obj = new RectangularIsland();
	clock_t startTime = clock();
	answer = obj->theProbablity(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p5 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p5 - answer) <= 1e-9 * max(1.0, fabs(p5));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	double p5;
	
	{
	// ----- test 0 -----
	p0 = 5;
	p1 = 8;
	p2 = 4;
	p3 = 3;
	p4 = 1;
	p5 = 0.75;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 5;
	p1 = 8;
	p2 = 4;
	p3 = 7;
	p4 = 1;
	p5 = 0.5;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 2;
	p1 = 2;
	p2 = 0;
	p3 = 1;
	p4 = 5;
	p5 = 0.03125;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 58;
	p1 = 85;
	p2 = 47;
	p3 = 74;
	p4 = 1000;
	p5 = 0.13056659769966347;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 1000;
	p1 = 1000;
	p2 = 123;
	p3 = 456;
	p4 = 5000;
	p5 = 0.9868611148475199;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
