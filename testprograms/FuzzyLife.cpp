#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <bitset>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long

using namespace std;

int movR[]={-1,-1,-1,0,0,1,1,1};
int movC[]={-1,0,1,-1,1,-1,0,1};
VS newG;
int R,C;

class FuzzyLife {
public:
	int survivingCells(vector <string>);

	bool alive(int row,int col) {
		int tot=0;

		FOR(move,0,8){
			int	nwR=row+movR[move],nwC=col+movC[move];
			if(0<=nwR && nwR<R && 0<=nwC && nwC<C && newG[nwR][nwC]=='1')
				++tot;
		}
		return ((tot==3) || (newG[row][col]=='1' && tot==2));
	}

	int count(char chng,int rowC,int colC) {
		newG[rowC][colC]=chng;

		int cnt=0;
		FOR(move,0,8){
			int	nwR=rowC+movR[move],nwC=colC+movC[move];
			cnt+=(alive(nwR,nwC));
		}
		return cnt;
	}
};

int FuzzyLife::survivingCells(vector <string> grid) {
	string tmp;
	FOR(col,0,SZ(grid[0])+2)
		PB(tmp,'0');

	newG.assign(SZ(grid)+2,tmp);
	R=SZ(newG),C=SZ(newG[0]);

	FOR(copR,0,SZ(grid))
		FOR(copC,0,SZ(grid[copR]))
			newG[1+copR][1+copC]=grid[copR][copC];

	FOR(row,0,R)
		FOR(col,0,C)
			if(newG[row][col]=='?'){
				int cnt0=count('0',row,col);
				int cnt1=count('1',row,col);
				if(cnt0>cnt1)
					newG[row][col]='0';
			}

	int ret=0;
	FOR(row,0,R)
		FOR(col,0,C)
			if(alive(row,col))
				++ret;

	return ret;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	FuzzyLife *obj;
	int answer;
	obj = new FuzzyLife();
	clock_t startTime = clock();
	answer = obj->survivingCells(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"011","0?1","100"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"101","0?0","101"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"11","11"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"111","1?1","111"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 8;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"?11?","0110","1001","?11?"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 12;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"00100","01010","10?01","01010","00100"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 12;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
