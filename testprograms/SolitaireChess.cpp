#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define MEM(A,B) memset(A,B,sizeof(A))
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long

using namespace std;

int mvr[]={-2,-2,-1,-1,1,1,2,2};
int mvc[]={-1,1,-2,2,-2,2,-1,1};

class SolitaireChess {
public:
	int transform(vector <string>, vector <string>);
	VS brd1,brd2;
	pair<int,int>pos1[21],pos2[21];
	int cnt1,cnt2,N;

	int bstcs[(1<<20)+5],optm[8][8][8][8];

	int dist[8][8];

	int cntKn(pair<int,int>frm, pair<int,int>to) {	
		int &ret=optm[frm.first][frm.second][to.first][to.second];

		if(ret!=-1)
			return ret;

		MEM(dist,-1);
		queue< pair<int,int> >brd;

		brd.push(frm);
		dist[frm.first][frm.second]=0;

		while(!brd.empty()){
			pair<int,int>prs=brd.front();
			brd.pop();
			int cst=dist[prs.first][prs.second];

			if(prs==to){
				ret=cst;
				return cst;
			} else
				FOR(mov,0,8){
					int tr=prs.first+mvr[mov],tc=prs.second+mvc[mov];
					if(0<=tr && tr<8 && 0<=tc && tc<8 && dist[tr][tc]==-1){
						brd.push(make_pair(tr,tc));
						dist[tr][tc]=cst+1;
					}
				}
		}
		ret=9999;
		return 9999;
	}

	int cntst(int frm, int to) {
		char in=brd1[pos1[frm].first][pos1[frm].second];
		char fin=brd2[pos2[to].first][pos2[to].second];

		if(in=='P'){
			if(fin=='P' && (pos1[frm].first<pos2[to].first || pos1[frm].second!=pos2[to].second))
				return 9999;
			else if(fin=='P')
				return pos1[frm].first-pos2[to].first;
			else {
				int df=pos1[frm].first;
				pair<int,int>tmp;
				tmp=make_pair(0,pos1[frm].second);
				return (df+cntKn(tmp,pos2[to]));
			}
		} else if(in=='N' && fin=='P')
			return 9999;
		else
			return cntKn(pos1[frm],pos2[to]);
	}

	int eval(int mask,int trn) {
		if(mask==((1<<N)-1))
			return 0;

		int &ret=bstcs[mask];
		if(ret!=-1)
			return ret;

		ret=9999;
		FOR(all,0,N)
			if(!( mask&(1<<all) )){
				int tmp=cntst(trn,all);
				if(tmp!=9999)
					ret<?=(tmp+eval(mask|(1<<all),trn+1));
			}

		return ret;
	}

};

int SolitaireChess::transform(vector <string> board1, vector <string> board2) {
	brd1=board1,brd2=board2;
	cnt1=0,cnt2=0;

	FOR(rw,0,8)
		FOR(cl,0,8){
			if(brd1[rw][cl]!='.')
				pos1[cnt1++]=make_pair(rw,cl);
			if(brd2[rw][cl]!='.')
				pos2[cnt2++]=make_pair(rw,cl);
		}

	if(cnt1!=cnt2)
		return -1;
	N=cnt1;

	MEM(bstcs,-1);
	MEM(optm,-1);

	int ans=eval(0,0);
	if(ans==9999)
		return -1;

	return ans;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	SolitaireChess *obj;
	int answer;
	obj = new SolitaireChess();
	clock_t startTime = clock();
	answer = obj->transform(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	int p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"...N....","........","........","........","........","........","...P....","........"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"...N....",".....N..","........","........","........","........","........","........"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 7;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"........","........","...P....","........","........","........","........","........"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"........","........","........","........","........","........","........","...P...."};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = -1;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"........","........","........","........","........","........","........",".N...P.."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"........","........","........","........","........","........",".....P..",".......N"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 5;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"N.......","........","N.......","........","........","........","........","........"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"........","..N.....","........","........","........","........","........","........"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = -1;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"..N.N...","PPP....N","..N..N..","N...N...","...NNNNN","N.......","...NN...","..N...N."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"..N....N","P....N..","..N..N..","N..NNN.N","N.....N.","N.N.....","...NNN..",".....N.N"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 23;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"........","........","...N....","........",".P....P.","........","........","...N...."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"..N...N.","..P...P.","........","........","........","........","........","........"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = -1;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
