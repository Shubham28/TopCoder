#include <algorithm>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <vector>
#include <map>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define MEM(A,B) memset(A,B,sizeof(A))
#define SZ(A) int(A.size())
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define VI vector<int>
#define VS vector<string>
#define LL long long

using namespace std;

const LL MOD=1234567891;

class TheBrickTowerHardDivTwo {
public:
	int find(int, int, int);

	int C,H;
	LL ways[50][10][260];

	int samePairs(int now[], int pst[], bool first) {
		int above=(now[0]==now[1]) + (now[0]==now[2]) + (now[1]==now[3]) + (now[2]==now[3]);
		int betw=(now[0]==pst[0]) + (now[1]==pst[1]) + (now[2]==pst[2]) + (now[3]==pst[3]);

		return above+((first)?0:betw);
	}

	//	State: Current height(0-based), Same colors pairs remaining, Previous 2x2 grid
	int putBrks(int ht, int remn, int prev) {
		if(ht==H)
			return 0;

		LL &tmp=ways[ht][remn][prev];
		if(tmp!=-1)
			return tmp;

		tmp=0;

		int pst[4];
		for(int copy=prev,i=0;i<4;copy/=4,i++)
			pst[i]=copy%4;

		FOR(b1,0,C)		FOR(b2,0,C)
			FOR(b3,0,C)		FOR(b4,0,C){
				int now[]={b1,b2,b3,b4};

				int match=samePairs(now,pst,(ht==0));
				if(match<=remn){
					tmp++;

					int mask=0;
					FOR(i,0,4)
						mask=mask*4+now[i];

					tmp+=putBrks(ht+1,remn-match,mask);
					tmp%=MOD;
				}
			}

		return tmp;
	}
};

int TheBrickTowerHardDivTwo::find(int C_, int K, int H_) {
	C=C_,H=H_;
	MEM(ways,-1);

	return putBrks(0,K,0);
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	TheBrickTowerHardDivTwo *obj;
	int answer;
	obj = new TheBrickTowerHardDivTwo();
	clock_t startTime = clock();
	answer = obj->find(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 0;
	p2 = 2;
	p3 = 4;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 1;
	p1 = 7;
	p2 = 19;
	p3 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 2;
	p1 = 3;
	p2 = 1;
	p3 = 14;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 4;
	p1 = 7;
	p2 = 47;
	p3 = 1008981254;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
