#include <algorithm>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <vector>
#include <sstream>
#include <map>
#include <queue>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define MEM(A,B) memset(A,B,sizeof(A))
#define SZ(A) int(A.size())
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define LL long long

using namespace std;

class MagicalGirl {
public:
	double maxExpectation(int, vector <int>, vector <int>, vector <int>);
	int M,L;
	VI dy,wn,gn;
	double expc[52][100002];

	double mxExpc(int N,int life) {
		life<?=M;

		double &tmp=expc[N][life];
		if(tmp!=-1)
			return tmp;

		tmp=dy[N]+life;
		int vct=min(M,life+gn[N]);
		double win,lose;

		if(N==L-1){
			win=wn[N]*(dy[N]+vct)/100.0;
			lose=(100-wn[N])*dy[N]/100.0;
		} else {
			int dif=dy[N+1]-dy[N];

			if(life>dif)
				tmp>?=mxExpc(N+1,life-dif);

			int finl=vct-dif;
			if(finl>0){
				win=wn[N]*mxExpc(N+1,finl)/100.0;
				lose=(100-wn[N])*dy[N]/100.0;
			} else {
				win=wn[N]*(dy[N]+vct)/100.0;
				lose=(100-wn[N])*dy[N]/100.0;
			}
		}
		tmp>?=(win+lose);
		return tmp;
	}
};

double MagicalGirl::maxExpectation(int M_, vector <int> day, vector <int> win, vector <int> gain) {
	dy=day,wn=win,gn=gain;
	M=M_,L=SZ(dy);

	FOR(i,0,L-1)	FOR(j,i+1,L)
		if(dy[i]>dy[j]){
			swap(dy[i],dy[j]);
			swap(wn[i],wn[j]);
			swap(gn[i],gn[j]);
		}

	EFOR(r,0,51)	EFOR(c,0,100001)
		expc[r][c]=-1;

	if(M<=dy[0])
		return M;

	return mxExpc(0,M-dy[0]);
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, vector <int> p2, vector <int> p3, bool hasAnswer, double p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}";
	cout << "]" << endl;
	MagicalGirl *obj;
	double answer;
	obj = new MagicalGirl();
	clock_t startTime = clock();
	answer = obj->maxExpectation(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p4 - answer) <= 1e-9 * max(1.0, fabs(p4));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <int> p1;
	vector <int> p2;
	vector <int> p3;
	double p4;
	
	{
	// ----- test 0 -----
	p0 = 2;
	int t1[] = {1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {75};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {1};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 2.5;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 10;
	int t1[] = {5,5,5,5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {100,100,100,100};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {1,1,1,1};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 14.0;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 10;
	int t1[] = {5,5,5,5,5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {40,80,60,20,0};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {10,10,10,10,10};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 13.0;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 2;
	int t1[] = {2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {100};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {2};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 2.0;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 20;
	int t1[] = {2,13,8,7,9,4,6,21};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {18,83,75,23,45,23,10,98};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {10,9,8,10,7,16,13,20};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 35.908;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 11;
	int t1[] = {10,20,30,40,50,60,70,80,90};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {100,100,100,100,100,100,100,100,100};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {10,10,10,10,10,10,10,10,10};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 101.0;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = 100000;
	int t1[] = {1000000};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {100};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {100000};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 100000.0;
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	p0 = 91681;
	int t1[] = {3070805,2981878,3767786,560719,1001080,4197717,133566,2288912,3378263,2332037,21136,3920298,1781959,1040525,3675941,3879781,1580254,4722969,583253,3955072,871621,4778697,3499358,2294572,799853,3615663,2016831,3152574,2002455,60245,1601150,3002576,659306,322821,4152467,3240672,1408177,4721295,3257642,1022591,2631579,1861031,1967444,2432515,1736009,842100,264007,915542,1289764};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {100,99,99,98,97,99,98,98,98,99,95,97,98,97,98,96,96,96,95,97,99,98,95,99,97,97,100,96,97,96,99,100,96,99,100,95,97,95,97,97,98,98,100,98,96,98,95,99,98};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {74222,4745,52571,48338,48601,7843,18050,85628,71947,90500,29842,65347,39541,54328,71132,15510,63231,36588,5018,71249,78877,81446,20754,80931,63933,65503,82478,83724,38857,54678,78864,14632,70563,88426,27826,25166,90542,84927,81814,83752,91459,38965,39800,81015,37679,25743,78497,74742,88574};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 159650.2544;
	all_right = KawigiEdit_RunTest(7, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
