#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <bitset>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() );
#define VI vector<int>
#define VL vector<long>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>

using namespace std;

class FuzzyLife {
public:
	int survivingCells(vector <string>);
};

int FuzzyLife::survivingCells(vector <string> grid) {
	int R=grid.size(),C=grid[0].size();

	FOR(fillR,0,R){
		grid[fillR].insert(grid[fillR].begin(),'0');
		PB(grid[fillR],'0');
	}
	string zero="0000000000000000000000000000000000000000";
	string add=zero.substr(0,C+2);
	grid.insert(grid.begin(),add);
	PB(grid,add);
	R+=2,C+=2;

	VS state;
	state=grid;
	int maxim=-1;

	VI row,col;

	FOR(r,0,R)
		FOR(c,0,C)
			if(grid[r][c]=='?'){
				PB(row,r);
				PB(col,c);
			}
			
	int ques=row.size();
	VS tmp;
	tmp=grid;
	
	int movR[]={-1,-1,-1,0,0,1,1,1};
	int movC[]={-1,0,1,-1,1,-1,0,1};
	
	vector< VI >cnt(R,VI(C,0));
	vector< VI >tmpC(R,VI(C,0));

	FOR(cntR,0,R)
		FOR(cntC,0,C)
			FOR(mov,0,8)
				if(0<=(cntR+movR[mov]) && (cntR+movR[mov])<R && 0<=(cntC+movC[mov]) && (cntC+movC[mov])<C)
					cnt[cntR][cntC]+=( (grid[cntR+movR[mov]][cntC+movC[mov]]=='1')?1:0 );
					
	tmpC=cnt;

	EFOR(mask,0,(1<<ques)-1){

		FOR(give,0,ques){
			state[row[give]][col[give]]=((mask>>give)&1==1)?'1':'0';

			if(state[row[give]][col[give]]=='1'){
				FOR(mov,0,8)
					if(0<=(row[give]+movR[mov]) && (row[give]+movR[mov])<R && 0<=(col[give]+movC[mov]) && (col[give]+movC[mov])<C)
						++tmpC[row[give]+movR[mov]][col[give]+movC[mov]];
			}
		}

		int chk=0;
		FOR(finR,0,R)
			FOR(finC,0,C){
				if(state[finR][finC]=='1' && (tmpC[finR][finC]<2 || tmpC[finR][finC]>3) )
					continue;
				else if(state[finR][finC]=='0' && (tmpC[finR][finC]==3) )
					++chk;
				else if(state[finR][finC]=='1')
					++chk;
			}

		maxim=max(maxim,chk);
		tmpC=cnt;
	}
	return maxim;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	FuzzyLife *obj;
	int answer;
	obj = new FuzzyLife();
	clock_t startTime = clock();
	answer = obj->survivingCells(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"011","0?1","100"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"101","0?0","101"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"11","11"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"111","1?1","111"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 8;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"?11?","0110","1001","?11?"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 12;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"00100","01010","10?01","01010","00100"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 12;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
