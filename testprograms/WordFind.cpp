#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <bitset>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long

using namespace std;

class WordFind {
public:
	vector <string> findWords(vector <string>, vector <string>);
	string conv(int row,int col) {
		char buf[5];
		sprintf(buf,"%d",row);
		string rw(buf);
		sprintf(buf,"%d",col);
		string cl(buf);
		return rw+" "+cl;
	}
};

vector <string> WordFind::findWords(vector <string> grid, vector <string> wL) {
	int R=SZ(grid),C=SZ(grid[0]),T=SZ(wL);
	VB done(T,false);
	VS ret(T);

	FOR(row,0,R)
		FOR(col,0,C)
			FOR(srch,0,T){

				if(!done[srch] && col+SZ(wL[srch])<=C && grid[row].substr(col,SZ(wL[srch]))==wL[srch]){
					done[srch]=true;
					ret[srch]=conv(row,col);
				}
				if(!done[srch] && row+SZ(wL[srch])<=R){
					string vert="";
					FOR(vt,0,SZ(wL[srch]))
						vert+=grid[row+vt][col];
					if(vert==wL[srch]){
						done[srch]=true;
						ret[srch]=conv(row,col);
					}
				}
				if(!done[srch] && row+SZ(wL[srch])<=R && col+SZ(wL[srch])<=C){
					string diag="";
					FOR(dg,0,SZ(wL[srch]))
						diag+=grid[row+dg][col+dg];
					if(diag==wL[srch]){
						done[srch]=true;
						ret[srch]=conv(row,col);
					}
				}
			}

	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, bool hasAnswer, vector <string> p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	WordFind *obj;
	vector <string> answer;
	obj = new WordFind();
	clock_t startTime = clock();
	answer = obj->findWords(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p2[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p2[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	vector <string> p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"TEST","GOAT","BOAT"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"GOAT","BOAT","TEST"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"1 0","2 0","0 0"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"SXXX","XQXM","XXLA","XXXR"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"SQL","RAM"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"0 0",""};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"EASYTOFINDEAGSRVHOTCJYG","FLVENKDHCESOXXXXFAGJKEO","YHEDYNAIRQGIZECGXQLKDBI","DEIJFKABAQSIHSNDLOMYJIN","CKXINIMMNGRNSNRGIWQLWOG","VOFQDROQGCWDKOUYRAFUCDO","PFLXWTYKOITSURQJGEGSPGG"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"EASYTOFIND","DIAG","GOING","THISISTOOLONGTOFITINTHISPUZZLE"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"0 0","1 6","0 22",""};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
