#include <algorithm>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <vector>
#include <sstream>
#include <map>
#include <queue>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define MEM(A,B) memset(A,B,sizeof(A))
#define SZ(A) int(A.size())
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define LL long long

using namespace std;

class SafeReturn {
public:
	int minRisk(int, vector <string>);
};

int SafeReturn::minRisk(int N, vector <string> streets) {
	return 0;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <string> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	SafeReturn *obj;
	int answer;
	obj = new SafeReturn();
	clock_t startTime = clock();
	answer = obj->minRisk(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <string> p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 3;
	string t1[] = {"-234","2---","3---","4---"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	string t1[] = {"-12","1-1","21-"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 3;
	string t1[] = {"-----7","--1---","-1-5--","--5-1-","---1-3","7---3-"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 2;
	string t1[] = {"-11","1-1","11-"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 45;
	string t1[] = {"--74-9488-455-7--5-76-4-3---68576-89-79543--334-","---3874-7793-9865--86--4865-9--6-3893446-66-8496","7--3788-9-35984-7636-54--9737-6--65754-----46-7-","433-7777335998-8-66-38---5-947835----64-6-8984-4","-877-3988-87783837--734965--9968348499-553337438","97873--88-68-9897--8-89-78-586--4-586-6539-46-8-","44879----976-95---39-8-953-5-58677--94-9698-5549","8--788----5-8393967997693576658-544-6-633553-8-5","879388---36-86--46-9-5-3649-9344-59634-88758--57","-7-3--9-3-44444-93-77873-38-5--37-975343---3-535","4935867564-----64-7-34--53--675--45495648--683-4","5359786--4--849--7-6-7-5673849-6577457983---367-","5-997--884-8-554--6-6---73--483---9-388577-893-7","-988899364-45-47837---8345--456--356667677-9-6-7","784-3859-4-954--765-39959-653-444-79-373-578583-","-6-889-3--6-47--4--595--6453-89-34746365-8--3-55","-57-37-9494--874----748-363-35-8-7--59--85-79-53","5-667--663-7-36---4--4859-54-3958-796-77-9-34-75","--36--37--7-675--4-33-4--9-874568-7743-363--9-4-","786--89997-6---5--3-93-48--5593"
			"-8748-4355-689-95","66-37--9-73-6-397-39-945-588--3---7-3-337-955837","--5838875847--9544-39-837939-8-8--8486-93--87635","4-4-49-6-7---89-884-48-658394839764586-55-96454-","-4--9-9933-5-35--5-4536-53-68-6639456-53566-446-","38--67536-56749639-8-755-68-55---5-76---4336-8-3","-6955835433735-46-9-59836-43436847398--88-5-4363","-57----798-3--6535--833-84-9--98-34--3-98989-35-","--39-556---8--53-4858996-39-4-5389-87--48-935979","697498-69564443-3-75--4854-4-8--47555-9-8-45-44-","8--796553-7985-85349-88-53--8-5--59-8387-6938--3","5-686-884-5-3649-9533-36-695-5-3848--54-37358569","76-38-6-43-6--4-856--896-883--3--8936-697894-566","6--53475-7-5--43-888--73-4-84-8--6667-4-6---495-","-36-4-745-47-3-47--7--69573975486-34-5-3-688-77-","885-85-499579577-7747844-34-598963--6-4946-36-45","997-48--6744-694-978-45579-85--364--88---498-45-","-35-9696359536-6564-388668-758-67-68-9983869866-","74469-4-435786339-34-66---3--35--5-89-38-6-7578-","94-4-6-6-4698776-7-33--5----98464-4-93-78---89-8","56--55938348"
			"5635-7353953-894-7-9-39-887---55-767","4--653638-8377--8-65735548888-376-4-3-8--878-6-9","36--39957---7758593----63-9--678-66486--8-589---","-6-83-855-----7----69-9635894939-8-96--575-7-55-","--4934-3836-898-73-8586-6-935354-83897-5887--486","3868765---839-5394995744-4-5-88-4-6-858--9---468","34-44-58-536368-----865483394-5597-467976-544-98","497-384-53-7--3557493346-6574-66574568-6--5869-3","-6-48-95754-77-535-575--33-9-396--5---879--6883-"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(4, p0, p1, false, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
