#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long

using namespace std;

class BaseConfusion {
public:
	long long sum(int, int, int);
	LL power(LL base,LL exp)
	{
		LL ans=1;
		EFOR(all,1,exp)
			ans*=base;
		return ans;
	}

	LL evalsum(LL fin,LL base) {
		LL tot=0;
		int loops=int( log(fin+1.0)/log(base+0.0) +1e-7)+2;

		FOR(dig,1,loops){
			LL len=power(base,dig);
			LL mult=len/base;
			LL cycl=(fin+1)/len;

			LL val=power(base+1,dig-1);
			FOR(rem,0,base){
				tot+=(cycl*val*mult*rem);
				LL left=fin+1-cycl*len;
				if(left>=1){
					LL tmp=left-rem*mult;
					tmp=(tmp>=0)?tmp:0;
					tmp=(tmp>mult)?mult:tmp;

					tot+=val*tmp*rem;
				}
			}
		}
		return tot;
	}
};

long long BaseConfusion::sum(int M, int N, int B) {
	LL subt=evalsum(M-1,B);
	LL fin=evalsum(N,B);
	return (LL)(fin-subt);
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, long long p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	BaseConfusion *obj;
	long long answer;
	obj = new BaseConfusion();
	clock_t startTime = clock();
	answer = obj->sum(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	long long p3;
	
	{
	// ----- test 0 -----
	p0 = 14;
	p1 = 18;
	p2 = 3;
	p3 = 129ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 1;
	p1 = 10;
	p2 = 16;
	p3 = 55ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 100;
	p1 = 100;
	p2 = 10;
	p3 = 121ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 209881;
	p1 = 210565;
	p2 = 3;
	p3 = 3141592653ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 1;
	p1 = 350000000;
	p2 = 16;
	p3 = 89827255572899906ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
