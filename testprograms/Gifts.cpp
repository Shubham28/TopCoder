#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define MEM(A,B) memset(A,B,sizeof(A))
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long

using namespace std;

int movr[]={-1,0,0,1};
int movc[]={0,-1,1,0};

class Gifts {
public:
	int maxGifts(vector <string>, int);
	int R,C,N;
	int betw[18][18],vist[51][51];

	map< pair<int,int>,int >num;
	pair<int,int>qpos;
	VS ct;

	int opt[1<<17][17];

	int BFS(pair<int,int>src, pair<int,int>dest) {
		queue< pair<int,int> >brd;
		MEM(vist,-1);

		brd.push(src);
		vist[src.first][src.second]=0;
		while(!brd.empty()){
			pair<int,int>prsn=brd.front();
			brd.pop();

			if(prsn==dest)
				return vist[prsn.first][prsn.second];
			else 
				FOR(mov,0,4){
					int tmpr=prsn.first+movr[mov],tmpc=prsn.second+movc[mov];

					if(0<=tmpr && tmpr<R && 0<=tmpc && tmpc<C && vist[tmpr][tmpc]==-1)
						if(ct[tmpr][tmpc]!='#'){
							vist[tmpr][tmpc]=vist[prsn.first][prsn.second]+1;
							brd.push(make_pair(tmpr,tmpc));
						}
				}
		}
		return 9999999;
	}

	int eval(int mask,int next) {
		if(mask==0)
			return betw[0][next];

		int &ret=opt[mask][next];
		if(ret!=-1)
			return ret;

		ret=INT_MAX;
		FOR(pos,0,N-1)
			if(mask&(1<<pos)){
				int rem=__builtin_popcount(mask);
				int aftr=(rem+1)*betw[pos+1][next];
				if(aftr>=9999999)
					continue;

				int jrn=eval(mask&(~(1<<pos)),pos+1);
				if(jrn>=9999999)
					continue;

				ret<?=(aftr+jrn);
			}

		return ret;
	}
};

int Gifts::maxGifts(vector <string> city, int T) {
	ct=city;
	R=SZ(ct),C=SZ(ct[0]);
	MEM(betw,-1);

//	King=0, Gifts=1 to (N-1), Queen=N
	N=1;
	FOR(rw,0,R)
		FOR(cl,0,C){
			if(ct[rw][cl]=='K')
				num[make_pair(rw,cl)]=0;
			else if(ct[rw][cl]=='Q')
				qpos=make_pair(rw,cl);
			else if(ct[rw][cl]=='G')
				num[make_pair(rw,cl)]=N++;
		}

	num[qpos]=N;
	for(map< pair<int,int>,int >::iterator it1=num.begin();it1!=num.end();it1++){
		map< pair<int,int>,int >::iterator it2=it1;
		++it2;
		for(;it2!=num.end();it2++){
			int frm=num[(*it1).first],to=num[(*it2).first];
			betw[frm][to]=BFS((*it1).first,(*it2).first);
			betw[to][frm]=betw[frm][to];
		}
	}

	int ret=0;
	MEM(opt,-1);
	FOR(all,1,1<<(N-1)){

//	Traverse in reverse order
		int tot=eval(all,N);

		if(tot<=T)
			ret>?=(__builtin_popcount(all));
	}

	return ret;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	Gifts *obj;
	int answer;
	obj = new Gifts();
	clock_t startTime = clock();
	answer = obj->maxGifts(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"#######","#K.G.Q#","#######"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6;
	p2 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"#######","#K.G.Q#","#######"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	p2 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"#######","#K.Q.G#","#######"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6;
	p2 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"#######","#K.Q.G#","#######"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 8;
	p2 = 1;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"#######","#K.QGG#","#######"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 9;
	p2 = 2;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"#....G#","###G###","#K...Q#","###.###","#G..GG#"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 50;
	p2 = 4;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	string t0[] = {"############.......###############################","############.#####.###############################","############.#####.###############################","############.#####.###############################","############.#####.###############################","############.#####.###############################","##.............G##.###############################","##.#########.#####.###############################","##.######G##.#####.###############################","##.#......##.#####.###############################",".............#####.###############################",".#.#.#.##..........###############################",".#.#.#.##.###......###############################","...#.#.##.###.####.###############################",".###.#.##.###.####.###############################",".###.#.######.####.###############################",".......######.####.###############################",".###..................############################","......................########################"
			
			};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 448;
	p2 = 3;
	all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	string t0[] = {
			
			};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 953845983;
	p2 = 15;
	all_right = KawigiEdit_RunTest(7, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 8 -----
	string t0[] = {
			
			};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 175;
	p2 = 4;
	all_right = KawigiEdit_RunTest(8, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
