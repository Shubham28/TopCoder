#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define MEM(A,B) memset(A,B,sizeof(A))
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long
int MOD=1000000007;

using namespace std;

class FoxAverageSequence {
public:
	int theCount(vector <int>);
};

//	Much cleaner apporach by rng_58
//	http://www.topcoder.com/stat?c=problem_solution&rm=307625&rd=14430&pm=11340&cr=22692969

int FoxAverageSequence::theCount(vector <int> seq) {
	int N=SZ(seq);
	int ways[2][41*41][41][2];
	MEM(ways,0);

	if(seq[0]==-1){
		EFOR(val,0,40)
			ways[0][val][val][0]=1;
	} else
		ways[0][seq[0]][seq[0]][0]=1;

	FOR(ps,1,N){
		MEM(ways[ps&1],0);

		EFOR(lst,0,40){
			if(seq[ps]!=-1)
				lst=seq[ps];

			EFOR(sm,lst,(ps+1)*40)
				if(lst*ps<=(sm-lst)){
					EFOR(prv,lst+1,40){
						ways[ps&1][sm][lst][1]+=ways[(ps-1)&1][sm-lst][prv][0];
						ways[ps&1][sm][lst][1]%=MOD;
					}
					EFOR(prv,0,lst){
						ways[ps&1][sm][lst][0]+=ways[(ps-1)&1][sm-lst][prv][0];
						ways[ps&1][sm][lst][0]%=MOD;
						ways[ps&1][sm][lst][0]+=ways[(ps-1)&1][sm-lst][prv][1];
						ways[ps&1][sm][lst][0]%=MOD;
					}
				}

			if(seq[ps]!=-1)
				break;
		}
	}

	int ans=0;
	EFOR(sum,0,N*40)	EFOR(val,0,40)
		FOR(dec,0,2){
			ans+=ways[(N-1)&1][sum][val][dec];
			ans%=MOD;
		}

	return ans;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	FoxAverageSequence *obj;
	int answer;
	obj = new FoxAverageSequence();
	clock_t startTime = clock();
	answer = obj->theCount(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	
	{
	// ----- test 0 -----
	int t0[] = {3,-1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {5,3,-1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {-1,0,40};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {-1,40,-1,-1,-1,10,-1,-1,-1,21,-1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 579347890;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {-1,12,25,0,18,-1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 58;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {-1,40,-1,-1,39,-1,-1,-1,38,-1,-1,-1,-1,37,-1,-1,-1,-1,-1,36,-1,-1,-1,-1,-1,-1,36,-1,-1,-1,-1,-1,-1,-1,35};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 441649240 ;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
