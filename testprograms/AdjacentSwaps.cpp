#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define MEM(A,B) memset(A,B,sizeof(A))
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long

const LL MOD=1000000007;

using namespace std;

class AdjacentSwaps {
public:
	int theCount(vector <int>);
};

int AdjacentSwaps::theCount(vector <int> p) {
	int N=SZ(p);
	LL nCr[51][51];

	MEM(nCr,0);
	EFOR(rw,0,50){
		nCr[rw][0]=1;
		EFOR(cl,1,rw)
			nCr[rw][cl]=(nCr[rw-1][cl]+nCr[rw-1][cl-1])%MOD;
	}

	int srt[50],chk[50];
	LL ways[50][50];

	FOR(len,0,N)
		FOR(fr,0,N-len){
			int to=fr+len;
			if(fr==to)
				ways[fr][to]=1;
			else {
				ways[fr][to]=0;

				EFOR(cp,fr,to)		srt[cp]=p[cp];
				sort(srt+fr,srt+to+1);

				FOR(mid,fr,to){
					MEM(chk,0);
					FOR(cp,fr,mid)		chk[srt[cp]]=1;
					chk[srt[mid+1]]=1;

					bool ord=1;
					EFOR(a,fr,mid)
						if(!chk[p[a]]){
							ord=0;
							break;
						}

					if(ord){
						LL tmp=(nCr[to-fr-1][mid-fr]*ways[fr][mid])%MOD;
						tmp=(tmp*ways[mid+1][to])%MOD;
						ways[fr][to]=(ways[fr][to]+tmp)%MOD;
					}
				}
			}
		}

	return (int)ways[0][N-1];
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	AdjacentSwaps *obj;
	int answer;
	obj = new AdjacentSwaps();
	clock_t startTime = clock();
	answer = obj->theCount(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	
	{
	// ----- test 0 -----
	int t0[] = {1,2,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {0,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {2,0,3,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {1,0,3,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {1,3,0,5,2,7,4,8,10,6,12,9,14,11,16,13,18,15,19,17};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 716743312;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
