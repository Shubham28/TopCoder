#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define MEM(A,B) memset(A,B,sizeof(A))
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long
 
using namespace std;

class KindAndCruel {
public:
	int crossTheField(string fl, int K, int C) {
		int tot=0;
		bool dn=1;

		FOR(p,0,SZ(fl)-1){
			if((fl[p]=='K' && tot%K==0) || (fl[p]=='C' && tot%C!=0)){
				dn=0;
				break;
			}

			if(fl[p+1]=='.')
				++tot;

			else if(fl[p]=='.' && fl[p+1]=='K')
				tot+=(((tot+1)%K==0)?2:1);

			else if(fl[p]=='.' && fl[p+1]=='C')
				tot=int(ceil((tot+1)/(double)C))*C;

			else if(fl[p]=='K' && fl[p+1]=='K'){
				if((tot+1)%K==0)
					tot+=2;
				else
					++tot;
			} else if(fl[p]=='K' && fl[p+1]=='C'){
				int nxt=int(ceil((tot+1)/(double)C))*C;
				int dang=int(ceil((tot+1)/(double)K))*K;

				if( ((tot+1)%K==0 && (tot+1)%C!=0) || (tot+1)%C==0 || nxt>dang)
					++tot;
				else
					tot=nxt;
			}

			else if(fl[p]=='C')
				++tot;
		}
		return (dn)?tot:-1;
	}
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1 << "," << p2;
	cout << "]" << endl;
	KindAndCruel *obj;
	int answer;
	obj = new KindAndCruel();
	clock_t startTime = clock();
	answer = obj->crossTheField(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = "...";
	p1 = 2;
	p2 = 5;
	p3 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = ".K.C.";
	p1 = 3;
	p2 = 4;
	p3 = 5;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = ".CCCC.";
	p1 = 3;
	p2 = 5;
	p3 = -1;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = ".CKKKKCKKKKC.KKKKCKKKKC.CKKKKCKKKKCKKKKCKKKKCKKKK.";
	p1 = 5;
	p2 = 5;
	p3 = 60;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "..KC.";
	p1 = 5;
	p2 = 7;
	p3 = -1;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
