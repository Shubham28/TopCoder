#include <vector>
#include <algorithm>
#include <iostream>
#include <cmath>
#include <cstdlib>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define SZ(A) int(A.size())
#define LL long long

using namespace std;

class CorrectMultiplicationTwo {
public:
	int getMinimum(int, int, int);

	inline LL ABSL(LL tmp) {
		return (tmp>=0)?tmp:-tmp;
	}

	LL calMin(LL fr,LL sc,LL prd) {
		LL tmp=INT_MAX;

		for(LL vr=1;vr<=fr+1000000;vr++){
			LL qt1=(prd/vr);		qt1>?=1;
			LL qt2=qt1+1;

			LL df1=ABSL(vr-fr)+ABSL(qt1-sc)+ABSL(vr*qt1-prd);
			LL df2=ABSL(vr-fr)+ABSL(qt2-sc)+ABSL(vr*qt2-prd);

			tmp<?=(df1<?df2);
		}
		return tmp;
	}
};

int CorrectMultiplicationTwo::getMinimum(int a, int b, int c) {
	LL ans=calMin(a,b,c);
	ans<?=calMin(b,a,c);

	for(LL fr=(1>?(a-1000));fr<=a+1000;fr++)
		for(LL sc=(1>?(b-1000));sc<=b+1000;sc++)
			ans<?=(ABSL(fr-a)+ABSL(sc-b)+ABSL(fr*sc-c));

	return ans;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	CorrectMultiplicationTwo *obj;
	int answer;
	obj = new CorrectMultiplicationTwo();
	clock_t startTime = clock();
	answer = obj->getMinimum(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = 19;
	p1 = 28;
	p2 = 522;
	p3 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 10;
	p1 = 30;
	p2 = 500;
	p3 = 11;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 111;
	p1 = 111;
	p2 = 12321;
	p3 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 1000;
	p1 = 100;
	p2 = 10;
	p3 = 1089;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 399;
	p1 = 522;
	p2 = 199999;
	p3 = 24;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 1234;
	p1 = 5678;
	p2 = 1;
	p3 = 6910;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = 29;
	p1 = 34483;
	p2 = 1000000;
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, false, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
