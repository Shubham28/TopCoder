#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <bitset>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() );
#define VI vector<int>
#define VL vector<long>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>

using namespace std;

class ColorfulStrings {
public:
	string getKth(int, int);

	VS comb;

	int Prod(string &num){
		int tmp=1;
		FOR(i,0,num.size())
			tmp*=(num[i]-48);
	
		return tmp;
	}

	bool ProdChk(string &chk){
	
		map<int,bool>done;
		
		EFOR(len,1,chk.size())
			EFOR(pos,0,chk.size()-len){
				string sub=chk.substr(pos,len);
				int mult=Prod(sub);
				if(done[mult])
					return false;
				else 
					done[mult]=true;
			}
		return true;
	}

	void count(int N,int pos,int mn,string &numb) {

		if(pos<=N)
			EFOR(dig,mn,10-N+pos){
				string tmp=numb;
				PB(tmp,char(48+dig));

				if(pos==N-1){
					do{
						if(ProdChk(tmp))
							PB(comb,tmp);
					} while(next_permutation(tmp.begin(),tmp.end()));
				} else
					count(N,pos+1,dig+1,tmp);
			}

		return;
	}
};

string ColorfulStrings::getKth(int n, int k) {

	if(n==1){
		if(k>=11)
			return "";
		else {
			string tmp;
			PB(tmp,char(k+47));
			return tmp;
		}
	} else if(n>=9)
		return "";
	else {
		string tmp="";
		count(n,0,2,tmp);

		SORT(comb);

		if(comb.size()<k)
			return "";
		else 
			return comb[k-1];
	}
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	ColorfulStrings *obj;
	string answer;
	obj = new ColorfulStrings();
	clock_t startTime = clock();
	answer = obj->getKth(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	string p2;

	{
	// ----- test 0 -----
	p0 = 3;
	p1 = 4;
	p2 = "238";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 4;
	p1 = 2000;
	p2 = "";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 5;
	p1 = 1;
	p2 = "23457";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 2;
	p1 = 22;
	p2 = "52";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 6;
	p1 = 464;
	p2 = "257936";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	system("pause");
	return 0;
}
// END KAWIGIEDIT TESTING// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
