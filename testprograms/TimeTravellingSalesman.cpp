#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define MEM(A,B) memset(A,B,sizeof(A))
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long

using namespace std;

struct vert{
	int conectd,weight;
	struct vert *next;
};

class TimeTravellingSalesman {
public:
	long long determineCost(int, vector <string>);
	int V;

	LL Prim(struct vert *vertex[],int start) {
		VB span(V);
		vector<LL>dist(V,LONG_MAX);

		dist[start]=0;
		int ver=start;

		while(!span[ver]){
			span[ver]=1;

			struct vert *tmp;
			tmp=vertex[ver];
			while(tmp!=NULL){
				int wt=tmp->weight;
				int chk=tmp->conectd;
				if(dist[chk]>wt && !span[chk])
					dist[chk]=wt;
				tmp=tmp->next;
			}

			int chosen=0;
			LL minim=LONG_MAX;
			FOR(all,0,V)
				if(!span[all] && minim>dist[all])
					minim=dist[all],chosen=all;
			ver=chosen;
		}

		LL ret=0;
		FOR(chk,0,V){
			if(dist[chk]==LONG_MAX)		return -1;
			else	ret+=dist[chk];
		}
		return ret;
	}

};

long long TimeTravellingSalesman::determineCost(int N_, vector <string> rds) {
	V=N_;
	string data="";
	FOR(inp,0,SZ(rds))		data+=rds[inp];

	struct vert *vertex[V];
	FOR(in,0,V)		vertex[in]=NULL;

	stringstream sstr;
	sstr<<data;

	string word;
	while(sstr>>word){
		int from,to,wt;
		sscanf(word.c_str(),"%d,%d,%d",&from,&to,&wt);

		struct vert *tmp;
		tmp=new vert;
		tmp->conectd=to,tmp->weight=wt;
		tmp->next=vertex[from];
		vertex[from]=tmp;

		tmp=new vert;
		tmp->conectd=from,tmp->weight=wt;
		tmp->next=vertex[to];
		vertex[to]=tmp;
	}

	return Prim(vertex,0);
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <string> p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	TimeTravellingSalesman *obj;
	long long answer;
	obj = new TimeTravellingSalesman();
	clock_t startTime = clock();
	answer = obj->determineCost(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <string> p1;
	long long p2;
	
	{
	// ----- test 0 -----
	p0 = 3;
	string t1[] = {"0,1,1 0,2,1 1,2,2"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 6;
	string t1[] = {"0,1,2 1,4,2 4,3,3 2,4,4 0,5,3"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 14ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 3;
	string t1[] = {"0,2,2"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = -1ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 4;
	string t1[] = {"1,0",",10","0 2,1",",584 3,2",",754"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1438ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
