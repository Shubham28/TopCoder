#include <algorithm>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <vector>
#include <map>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define MEM(A,B) memset(A,B,sizeof(A))
#define SZ(A) int(A.size())
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define VI vector<int>
#define VS vector<string>
#define LL long long

using namespace std;

class OrderOfTheHats {
public:
	int minChanged(vector <string>);

	int L,adj[21];

	int opt[(1<<20)+1];

	int minCost(int mask) {
		if(mask==((1<<L)-1))
			return 0;

		if(opt[mask]!=-1)
			return opt[mask];

		int &ret=opt[mask];
		ret=4000;

		FOR(r,0,L)
			if(!((mask>>r)&1)){
				int next=mask|(1<<r);
				int cst=__builtin_popcount(next&adj[r]);			//	Bit count of their AND gives the number of reverse edges

				ret<?=cst+minCost(next);
			}

		return ret;
	}
};

int OrderOfTheHats::minChanged(vector <string> spl) {
	L=SZ(spl);

	FOR(i,0,L){
		adj[i]=0;
		FOR(j,0,L)
			if(spl[i][j]=='Y')
				adj[i]|=(1<<j);
	}

	MEM(opt,-1);

	return minCost(0);
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	OrderOfTheHats *obj;
	int answer;
	obj = new OrderOfTheHats();
	clock_t startTime = clock();
	answer = obj->minChanged(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"Y"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"NYN","NNY","NNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"NYN","NNY","YNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"NYYYYYY","YNYYYYY","YYNYYYY","YYYNYYY","YYYYNYY","YYYYYNY","YYYYYYN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 21;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"NNNY","YNYN","YNNN","YYYN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"YYYYYNNYYYNYNNNNYNNY","NYNNNYYNNYNYYYNYYYYY","NNYNNNYYNNNNNNYYYYNY","YYNYNYYNNYYYNYNNNYYY","NYYNNYNYNYNNNNYYYNYN","NNNNNYYNYNNYYYYNYYYN","YNYNYYNNNYNNNNNYNNYY","NYYYYNYNYNNYNNYNNNNY","YYYYNYYNNYYYNNYNNYNY","YYYYYYNYNYNYNNNNNNYN","NNYYYYYNNNYNNNYNNNNY","YYNNNYNYYNYYNYYNYNYN","NNYNYYNYYNYYNYNYNYYN","YNYNYYNYNNNYNYNYYNYY","NNYNNNYYYYYYYYYYYNYY","YYYYYNYYNYYYYYNNYNNN","NYYYYYYYYNNNNNYYNNYN","YNNYNNNYYNYYYNYNYYYY","YYNNYNYYYNYYNNNYYNNY","NNYNYNYYYNYYNYNNYNNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 79;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	string t0[] = {"YYNYNN","YNYNNY","YYYYNN","NNNYNN","NNNYNN","YNYNYN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	string t0[] = {"NNNNNNNNNN","NNNNNNNNNN","NNNYNNYNNN","NNNYNNYNNN","NNNYNNYNNN","NNNNNNNNNN","NNYYYYYYNN","NNYNNNNYNN","NNNYYYYNNN","NNNNNNNNNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6;
	all_right = KawigiEdit_RunTest(7, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
