#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <bitset>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() );
#define VI vector<int>
#define VL vector<long>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>

using namespace std;

class MakeUnique {
public:
	string eliminated(string);
};

string MakeUnique::eliminated(string orig) {
	int N=orig.size();
	VI len(N,1),track(N,-1);

	string copy=orig;
	SORT(copy);
	FOR(c,0,copy.size())
		if(copy[c+1]==copy[c]){
			copy.erase(c+1,1);
			--c;
		}

	FOR(c,1,N){
		FOR(sub,0,c)
			if(orig[c]>orig[sub] && len[c]<=len[sub]+1)
				len[c]=len[sub]+1,track[c]=sub;
	}

	if(find(len.begin(),len.end(),copy.size())==len.end())
		return "";

	string dots="............................................................";
	if(copy.size()==1)
		return dots.substr(0,N-1)+copy;

	VS ans;
	RFOR(col,N-1,0)
		if(len[col]==copy.size()){
			int c=col;
			string ret="";
			ret=dots.substr(0,N-c-1)+ret;
			ret=orig[c]+ret;

			while(track[c]!=-1){
				ret=dots.substr(0,c-track[c]-1)+ret;
				c=track[c];
				ret=orig[c]+ret;
			}
			ret=dots.substr(0,c)+ret;
			PB(ans,ret);
		}

	string fin=orig;
	int minim=N;
	FOR(pos,0,ans.size()){
		int strt,end;

		FOR(c,0,ans[pos].size())
			if(ans[pos][c]!='.'){
				strt=c;
				break;
			}

		RFOR(c,ans[pos].size()-1,0)
			if(ans[pos][c]!='.'){
				end=c;
				break;
			}

		if(end-strt<minim)
			fin=ans[pos],minim=end-strt;

		if(end-strt==minim && ans[pos]<fin)
			fin=ans[pos],minim=end-strt;
	}
	return fin;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	MakeUnique *obj;
	string answer;
	obj = new MakeUnique();
	clock_t startTime = clock();
	answer = obj->eliminated(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	
	{
	// ----- test 0 -----
	p0 = "ABBBXCXABCX";
	p1 = ".......ABCX";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "ABBBXCXABCB";
	p1 = "A..B.CX....";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "ABBBXCABCB";
	p1 = "";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "AABACBXABX";
	p1 = ".AB.C.X...";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "CABDEAFDEGSDABCDEADFGSEFBGS";
	p1 = "............ABCDE..FGS.....";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "AAAAAA";
	p1 = ".....A";
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
