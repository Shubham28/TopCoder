#include <algorithm>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <sstream>
#include <vector>
#include <map>
#include <queue>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define SZ(A) int(A.size())
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define MEM(A,B) memset(A,B,sizeof(A))
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define LL long long

using namespace std;

class SkewedPerspectives {
public:
	vector <string> areTheyPossible(vector <int>, int, int, vector <string>);
	VI cbs;
	int B,W;

	bool chkPossible(string mat) {
		VI dif=cbs;
		int blk=B,L=SZ(mat);

		FOR(i,0,L){
			if(mat[i]!='b')
				--dif[mat[i]-'0'];
			else {
				--blk;
				if(i+1<L && mat[i+1]=='b')
					++i;
			}
		}

		int wd1=0,wd2=blk;
		FOR(a,0,3){
			if(dif[a]<0)		return 0;
			wd1+=dif[a];
		}
		if(blk<0)		return 0;

		int pl=1;
		FOR(a,0,L){

		//	Skips the element after continuous black blocks
			int cont=0,ps=a;
			while(ps<L && mat[ps++]=='b')
				cont++;

			if(cont&1){
				int req=a-1;
				if(a==0){
					if(cont==1)		return 0;
					req=1;
				}
				if(pl==W || wd1+2*wd2<req)		return 0;

				++pl;
				if(req&1){
					if(wd1==0)		return 0;
					req--,wd1--;
				}
				
				if(2*wd2>=req)
					wd2-=req/2,req=0;
				else
					req-=wd2*2,wd2=0;

				if(req>0)
					wd1-=req;
			}
			a=ps-1;
		}
		return 1;
	}
};

vector <string> SkewedPerspectives::areTheyPossible(vector <int> cb, int B_, int w, vector <string> vw) {
	cbs=cb,B=B_,W=w;
	VS ret;

	FOR(a,0,SZ(vw)){
		if(chkPossible(vw[a])){
			PB(ret,"valid");
		} else
			PB(ret,"invalid");
	}
	return ret;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, int p2, vector <string> p3, bool hasAnswer, vector <string> p4) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1 << "," << p2 << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p3[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	SkewedPerspectives *obj;
	vector <string> answer;
	obj = new SkewedPerspectives();
	clock_t startTime = clock();
	answer = obj->areTheyPossible(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p4.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p4[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p4.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p4[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	int p2;
	vector <string> p3;
	vector <string> p4;
	
	{
	// ----- test 0 -----
	int t0[] = {1,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 2;
	string t3[] = {"012","012bb","bb0","21bb","21b","1bb20"};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	string t4[] = {"valid","valid","valid","valid","valid","valid"};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {0,1,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = 2;
	string t3[] = {"b","bb","bbb","bbbb","bbbbb","bbbbbb","1","1b","1bb","1bbb","1bbbb","1bbbbb","1bbbbbb","b1","b1b","b1bb","b1bbb","b1bbbb","b1bbbbb","bb1","bb1b","bb1bb","bb1bbb","bb1bbbb","bbb1","bbb1b","bbb1bb","bbb1bbb","bbbb1","bbbb1b","bbbb1bb","bbbbb1","bbbbb1b","bbbbbb1"};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	string t4[] = {"invalid","valid","valid","valid","valid","valid","valid","valid","valid","valid","valid","valid","valid","invalid","invalid","invalid","invalid","invalid","invalid","valid","valid","valid","invalid","valid","invalid","invalid","invalid","invalid","valid","invalid","valid","invalid","invalid","valid"};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {100,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 20;
	p2 = 3;
	string t3[] = {"00000000000000000000000000000000000000000000000000","00000000000000000000000000000000000b00000000000000","0000000000000000000000000000000000000000000000000b","bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb0000000000000"};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	string t4[] = {"valid","valid","valid","valid"};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {5,6,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 1;
	string t3[] = {"00000111111222","0000111111222","0000011111222","000001111111222","0000011111122","b"};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	string t4[] = {"valid","valid","valid","invalid","valid","invalid"};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {100,100,100};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 100;
	p2 = 50;
	string t3[] = {"2","bb1b012012012012012012012","bb1b012012012012012012012b","bb1b012012012b012b012b012012b","bb1b0b1b2b0b1b2b0b1b2bb012b012b012012b","b1b0b1b2b0b1b2b0b1b2bb012b012b012012b","bbb1b012012012012012012012"};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	string t4[] = {"valid","valid","valid","valid","valid","invalid","valid"};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {0,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 1;
	string t3[] = {"0","bb"};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	string t4[] = {"invalid","invalid"};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	int t0[] = {3,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	p2 = 3;
	string t3[] = {"00b0b","bbbbbbbb","000b"};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	string t4[] = {"invalid","valid","valid"};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	int t0[] = {68,12,60};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 66;
	p2 = 8;
	string t3[] = {"1011222bb222202220200000bb0bbbbbbb0b0000bb0bb0","bbb000000b2bbbbbbbbb0b2020bb0002bb000bb0b2b","00b200b0200bbb022b0b00202bb2bbb0b020bbb0b","0112bb1022bb2200bbb002bbbb222bb2bbb200202020bbbb2","2020bbb202b02bb0b22b2bb0000b0220bbb22b2bb0","b0200001b010bb000020bb0b0bb2b00b10b22b0b0"};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	string t4[] = {"valid","valid","invalid","valid","valid","invalid"};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	all_right = KawigiEdit_RunTest(7, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
