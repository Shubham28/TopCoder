#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define MEM(A,B) memset(A,B,sizeof(A))
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long

using namespace std;

class NewItemShop {
public:
	double getMaximum(int, vector <string>);

	double hr[25],scr[25],prb[25];
	int cust[25],indx[25];
	int L;

	double opt[25][25][5000];

	double calOpt(int swrd,int now,int mask) {
		if(swrd==0 || now==L)
			return 0;

		double &use=opt[swrd][now][mask];
		if(use!=-1.)
			return use;

		// A multi-visit customer has already visited
		if(indx[cust[now]]!=-1 && ((1<<indx[cust[now]])&mask))
			return use=calOpt(swrd,now+1,mask);

		// Visits 1st time
		int nwMask=(indx[cust[now]]==-1)?mask:(mask|(1<<indx[cust[now]]));

		use=prb[now]*max(scr[now]+calOpt(swrd-1,now+1,nwMask),			//	Sells the sword
						calOpt(swrd,now+1,nwMask));						//	Rejects the offer

		// Doesn't come
		use+=(1-prb[now])*calOpt(swrd,now+1,mask);

		return use;
	}
};

double NewItemShop::getMaximum(int swords, vector <string> data) {
	L=0;
	int multi=0;

	FOR(i,0,SZ(data)){
		FOR(p,0,SZ(data[i]))
			if(data[i][p]==',')
				data[i][p]=' ';

		stringstream brk(data[i]);
		int fr,sc,th;
		double tot=100;

		int times=0;
		while(brk>>fr>>sc>>th){
			hr[L]=fr,scr[L]=sc,prb[L]=th/tot;
			tot-=th;
			cust[L++]=i;
			times++;
		}

		indx[i]=(times>1)?multi++:-1;
	}

	FOR(i,0,L)
		FOR(j,i+1,L)
			if(hr[i]>hr[j]){
				swap(hr[i],hr[j]);		swap(scr[i],scr[j]);	swap(prb[i],prb[j]);
				swap(cust[i],cust[j]);
			}

	FOR(x,0,25)		FOR(y,0,25)		FOR(z,0,5000)
		opt[x][y][z]=-1.;

	return calOpt(swords,0,0);
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <string> p1, bool hasAnswer, double p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	NewItemShop *obj;
	double answer;
	obj = new NewItemShop();
	clock_t startTime = clock();
	answer = obj->getMaximum(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <string> p1;
	double p2;
	
	{
	// ----- test 0 -----
	p0 = 1;
	string t1[] = {"8,1,80 16,100,11","12,10,100"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 19.0;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	string t1[] = {"8,1,80 16,100,11","12,10,100"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 21.8;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1;
	string t1[] = {"0,90,25 2,90,25 4,90,25 6,90,25","7,100,80"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 90.0;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 3;
	string t1[] = {"17,31,41 20,59,26 23,53,5","19,89,79","16,32,38 22,46,26","18,43,38 21,32,7"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 135.5121414;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 5;
	string t1[] = {"1,1,10","2,2,9","3,3,8","4,4,7","5,5,6","6,6,5","7,7,4","8,8,3","9,9,2","10,10,1"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2.1999744634845344;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 24;
	string t1[] = {"1,60,23","18,17,19","3,21,50 7,56,6","19,48,25","13,62,62","14,78,19","9,17,76 21,54,2","16,64,12","17,41,41","6,46,4 15,35,47","5,56,7 22,17,36","10,73,5 20,44,27","0,26,34 12,39,8 23,14,31","11,38,92","4,1,50 8,16,15","2,99,90"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(5, p0, p1, false, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
