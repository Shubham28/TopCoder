#include <algorithm>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <vector>
#include <map>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define MEM(A,B) memset(A,B,sizeof(A))
#define SZ(A) int(A.size())
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define VI vector<int>
#define VS vector<string>
#define LL long long

using namespace std;

class FoxPlusMinus {
public:
	vector <int> maximize(vector <int>, int);

	int L;
	VI fr,ret;

	//	Orders the sequence with the largest element at position 'N'
	void fxdLast(int N) {
		for(int i=0,pos=0;pos<L;pos++){
			if(pos==(N-1))		ret[pos]=fr[L-1];
			else				ret[pos]=fr[i++];
		}
	}

	//	Orders the sequence with alternate +ve & -ve element with last -ve element at position 'mn'
	void altrNeg(int mn) {
		int inc=-2;
		for(int pos=0;pos<L;pos++,mn+=inc){
			if(mn<0)	mn=(mn!=-1),inc=2;

			ret[mn]=fr[pos];
		}
	}
};

vector <int> FoxPlusMinus::maximize(vector <int> fr_, int N) {
	fr=fr_;
	L=SZ(fr),N++;
	SORT(fr);
	ret.assign(L,0);

	if(L&1){
		N=N%(L+1);
		if(N==0)
			altrNeg(L-2);
		else
			fxdLast(N);
	} else {
		if(N<=L)
			fxdLast(N);
		else {
			altrNeg(L-1-!(N&1));

			if(N<2*L){
				int bnd=L-(2*L+1-N);
				int len=L-bnd;
				VI same(len);

				FOR(i,bnd,L)	same[i-bnd]=ret[i];
				SORT(same);

				if(N&1){
					int ngt=int(ceil(len)/2.)-1;
					for(int i=0,pst=len-1;i<len;i++)
						ret[L-1-i]=(i&1)?same[pst--]:same[ngt--];
				} else {
					int ngt=int(floor(len)/2.)-1;
					for(int i=0,pst=len-1;i<len;i++)
						ret[L-1-i]=(i&1)?same[ngt--]:same[pst--];
				}
			}
		}
	}
	return ret;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, vector <int> p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	FoxPlusMinus *obj;
	vector <int> answer;
	obj = new FoxPlusMinus();
	clock_t startTime = clock();
	answer = obj->maximize(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p2[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p2[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	vector <int> p2;
	
	{
	// ----- test 0 -----
	int t0[] = {1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	int t2[] = {2,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1,2,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	int t2[] = {2,1,3};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {-3,1,-4,1,-5,9,-2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 10;
	int t2[] = {-5,-4,9,-3,-2,1,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {2,7,-1,8,-2,-8};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 10;
	int t2[] = {2,-1,7,-2,8,-8};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {-10,-20,-30};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	int t2[] = {-30,-10,-20};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {1,2,4,9,7,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 13;
	int t2[] = {3,4,2,7,1,9};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	int t0[] = {-4112039,51143992,941422315,-153492958,499218832,543599293,132059490,-434243951,-95819234,1552938,-857192847,481950390,401099286,71482395,-711450593,8101919};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 884142312;
	int t2[] = {51143992,8101919,71482395,1552938,132059490,-4112039,401099286,-95819234,481950390,-153492958,499218832,-434243951,543599293,-711450593,941422315,-857192847};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	int t0[] = {-85011351,-449199160,71067748,-336872845,-514031506,-285563651,744468269,143528621,-305704679,-356547484,-632580247,-421532563,970218247,-705971124,-941316368,-410495811,-403076070,495859705,-561693491,313372025,121910835,419391647,-141300061,219241998,800502275,655172486,65066915,-760182575,-799044917,-113523537,909440605,-795745856,-997088698,424864834,-829422038,923878585,-446495489,422897699,-484452221,456076113,-232389510,943539384,-280277473,861873476,158284490,-897769811};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 54;
	int t2[] = {-141300061,-232389510,-113523537,-280277473,-85011351,-285563651,65066915,-305704679,71067748,-997088698,121910835,-941316368,143528621,-897769811,158284490,-829422038,219241998,-799044917,313372025,-795745856,419391647,-760182575,422897699,-705971124,424864834,-632580247,456076113,-561693491,495859705,-514031506,655172486,-484452221,744468269,-449199160,800502275,-446495489,861873476,-421532563,909440605,-410495811,923878585,-403076070,943539384,-356547484,970218247,-336872845};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(7, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 8 -----
	int t0[] = {804918106,-660906814,-499375228,262079369,678146572,-972671070,992055438,-302654769,-119734085,469002091,-97131636,-117227094,987533423,-627724203,-812322540,845912779,767106485,-182174075,-38793302,-764715064,168800662,-535546066,832611083,949734698,-81236921,105873312,512985453,342101520};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 42;
	int t2[] = {105873312,-38793302,168800662,-81236921,262079369,-97131636,342101520,-117227094,469002091,-119734085,512985453,-182174075,678146572,-302654769,767106485,-972671070,804918106,-812322540,832611083,-764715064,845912779,-660906814,949734698,-627724203,987533423,-535546066,992055438,-499375228};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(8, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
