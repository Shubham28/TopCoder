#include <algorithm>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <vector>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define MEM(A,B) memset(A,B,sizeof(A))
#define SZ(A) int(A.size())
#define VI vector<int>

using namespace std;

class RandomColoringDiv2 {
public:
	int getCount(int, int, int, int, int, int, int, int);
};

int RandomColoringDiv2::getCount(int mxR, int mxG, int mxB, int stR, int stG, int stB, int d1, int d2) {
	int ans=0;
	FOR(r,0,mxR)	FOR(g,0,mxG)	FOR(b,0,mxB){
		if(abs(stR-r)>d2 || abs(stG-g)>d2 || abs(stB-b)>d2)
			continue;

		bool grt=0;
		grt|=(abs(stR-r)>=d1);
		grt|=(abs(stG-g)>=d1);
		grt|=(abs(stB-b)>=d1);
		if(grt)
			++ans;
	}
	return ans;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, int p5, int p6, int p7, bool hasAnswer, int p8) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << p4 << "," << p5 << "," << p6 << "," << p7;
	cout << "]" << endl;
	RandomColoringDiv2 *obj;
	int answer;
	obj = new RandomColoringDiv2();
	clock_t startTime = clock();
	answer = obj->getCount(p0, p1, p2, p3, p4, p5, p6, p7);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p8 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p8;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	int p5;
	int p6;
	int p7;
	int p8;
	
	{
	// ----- test 0 -----
	p0 = 5;
	p1 = 1;
	p2 = 1;
	p3 = 2;
	p4 = 0;
	p5 = 0;
	p6 = 0;
	p7 = 1;
	p8 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 4;
	p1 = 2;
	p2 = 2;
	p3 = 0;
	p4 = 0;
	p5 = 0;
	p6 = 3;
	p7 = 3;
	p8 = 4;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 4;
	p1 = 2;
	p2 = 2;
	p3 = 0;
	p4 = 0;
	p5 = 0;
	p6 = 5;
	p7 = 5;
	p8 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 6;
	p1 = 9;
	p2 = 10;
	p3 = 1;
	p4 = 2;
	p5 = 3;
	p6 = 0;
	p7 = 10;
	p8 = 540;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 6;
	p1 = 9;
	p2 = 10;
	p3 = 1;
	p4 = 2;
	p5 = 3;
	p6 = 4;
	p7 = 10;
	p8 = 330;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 49;
	p1 = 59;
	p2 = 53;
	p3 = 12;
	p4 = 23;
	p5 = 13;
	p6 = 11;
	p7 = 22;
	p8 = 47439;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
