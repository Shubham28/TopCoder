#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <bitset>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() );
#define VI vector<int>
#define LL long long
#define ALL(A) A.begin(),A.end()

using namespace std;

class TheLuckyNumbersLevelTwo {
public:
	vector <int> find(vector <int>);
};

vector <int> TheLuckyNumbersLevelTwo::find(vector <int> numb) {
	SORT(numb);
	VI ret;
	map<LL,VI>left,right;
	LL sum;

	FOR(lft,0,1<<(numb.size()/2)){
		sum=0;
		VI tmp;

		FOR(pos,0,(numb.size()/2)){
			sum=sum+(((lft>>pos)&1)?numb[pos]:0);
			if((lft>>pos)&1)
				PB(tmp,numb[pos]);
		}
		SORT(tmp);

		if(left.find(sum)==left.end())
			left[sum]=tmp;
		else if(left[sum]>tmp)
			left[sum]=tmp;
	}

	FOR(rght,0,1<<(numb.size()-numb.size()/2)){
		sum=0;
		VI tmp;

		FOR(pos,0,(numb.size()-numb.size()/2)){
			sum=sum+(((rght>>pos)&1)?numb[pos+numb.size()/2]:0);
			if((rght>>pos)&1)
				PB(tmp,numb[pos+numb.size()/2]);
		}
		SORT(tmp);

		if(right.find(sum)==right.end())
			right[sum]=tmp;
		else if(right[sum]>tmp)
			right[sum]=tmp;
	}
	VI ans(50,1000000000);

	RFOR(len,11,0)
		EFOR(chn,0,1){
			LL total=0;
			EFOR(dig,0,len)
				total=total*10+((chn==0)?7:4);

			map<LL,VI>:: iterator iLft;
			for(iLft=left.begin();iLft!=left.end();iLft++){
				LL make=total-iLft->first;
				if(right.find(make)!=right.end()){
					VI tmp(ALL(left[iLft->first]));
					tmp.insert(tmp.end(),ALL(right[make]));
					if(tmp<ans)
						ans=tmp;
				}
			}
			if(ans.size()!=50)
				return ans;
		}

	if(ans.size()==50)
		return VI();
}


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, vector <int> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	TheLuckyNumbersLevelTwo *obj;
	vector <int> answer;
	obj = new TheLuckyNumbersLevelTwo();
	clock_t startTime = clock();
	answer = obj->find(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p1[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	
	{
	// ----- test 0 -----
	int t0[] = {1,2,3,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {12,43,29};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1.clear() /*{}*/;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {4,7};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {7};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {41,2,28,44,7,42,21};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {7,28,42};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {15,10,28,3,13,27,7};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {7,15,27,28};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {18,45,6};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1.clear() /*{}*/;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	int t0[] = {34,20,26,28,33,23,44,40,25,10,36,14,7,29,21,27,17,13,19,24,32,41,31};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {7,10,13,14,17,19,20,21,23,24,25,26,27,28,29,31,32,34,44};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
