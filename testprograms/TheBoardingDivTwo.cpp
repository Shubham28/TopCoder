#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long

using namespace std;

class TheBoardingDivTwo {
public:
	int find(vector <int>, int);
};

int TheBoardingDivTwo::find(vector <int> pat, int limit) {
	int N=SZ(pat),ans=0;
	int perm[N];

	EFOR(all,1,N)
		perm[all-1]=all;

	int seats[2000][2*N],lag[N];
	bool skip;
	bool done[N],comp[N];

	do{
		skip=false;
		FOR(all,0,N)
			if(pat[all]!=-1 && perm[all]!=pat[all]){
				skip=true;
				break;
			}
		if(skip)
			continue;

		memset(seats,-1,sizeof(seats));
		FOR(fill,0,N)
			seats[0][fill]=perm[fill];

		int stp=0;
		memset(done,0,sizeof(done));
		memset(lag,-1,sizeof(lag));
		memset(comp,0,sizeof(comp));

		while(true){
			++stp;
			RFOR(rev,2*N-1,0){
				int X=seats[stp-1][rev],Y=rev+1;

				if(X!=-1 && done[X-1]==false){
					if(Y==N+X){
						FOR(fill,stp,stp+74)
							seats[fill][Y-1]=X;
						seats[stp+74][Y-1]=-1,lag[X-1]=stp+73,done[X-1]=true;
					} else if(Y<N+X && seats[stp][Y]==-1)
						seats[stp][Y]=X;
					else if(Y<N+X && seats[stp][Y]!=-1)
						seats[stp][Y-1]=X;
				}
			}
			FOR(mark,0,N)
				if(lag[mark]==stp)
					comp[mark]=true;

			bool chk=true;
			FOR(all,0,N)
				if(comp[all]==false){
					chk=false;
					break;
				}

			if(chk){
				ans+=(stp<=limit);
				break;
			}
			if(stp>limit)
				break;
		}

	} while(next_permutation(perm,perm+N));
	return ans;

}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	TheBoardingDivTwo *obj;
	int answer;
	obj = new TheBoardingDivTwo();
	clock_t startTime = clock();
	answer = obj->find(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {-1,-1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 100;
	p2 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {-1,2,-1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 222;
	p2 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {2,1,3,5,4,6};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 155;
	p2 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {-1,-1,-1,-1,-1,-1,-1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 198;
	p2 = 233;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
