#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long

using namespace std;

class SubAnagrams {
public:
	int maximumParts(vector <string>);

	bool subanag(string &fir, string &sec){
		bool flag;

		FOR(srch,0,SZ(fir)){
			flag=false;

			FOR(chk,0,SZ(sec))
				if(fir[srch]==sec[chk]){
					sec[chk]='*',flag=true;
					break;
				}

			if(!flag)
				return false;
		}
		return true;
	}
};

int SubAnagrams::maximumParts(vector <string> sup) {
	string mat="";
	FOR(comb,0,SZ(sup))
		mat+=sup[comb];

	int N=SZ(mat);

	vector< VI >cost(N+1,VI(N+1,1));

	EFOR(len,2,N)
		EFOR(pos,0,N-len){
		cout<<len<<"-> "<<pos<<"\t";
			FOR(brk,1,len){
				string fir=mat.substr(pos,brk);
				string sec=mat.substr(pos+brk,len-brk);	cout<<fir<<","<<sec<<"  ";

				if(subanag(fir,sec))
					cost[pos][pos+len-1]>?=(cost[pos][pos+brk-1]+cost[pos+brk][pos+len-1]);
			}cout<<"\n";
		}

	FOR(row,0,N){	FOR(col,0,N)	cout<<cost[row][col]<<"  ";	cout<<"\n";	}	cout<<"\n\n";
	return cost[0][N-1];

}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	SubAnagrams *obj;
	int answer;
	obj = new SubAnagrams();
	clock_t startTime = clock();
	answer = obj->maximumParts(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"ABABAB"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	/*
	{
	// ----- test 1 -----
	string t0[] = {"AAXAAAABX"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"ABCDEFGHIJKL"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}*/
	
	{
	// ----- test 3 -----
	string t0[] = {"ABBAB","B","BBX","Z"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
