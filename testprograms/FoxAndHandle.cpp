#include <algorithm>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <vector>
#include <map>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define MEM(A,B) memset(A,B,sizeof(A))
#define SZ(A) int(A.size())
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define VI vector<int>
#define VS vector<string>
#define LL long long

using namespace std;

class FoxAndHandle {
public:
	string lexSmallestName(string);

	string S;
	int L;
	map<char,int>cnt;
	map<char,int>::iterator it;

	bool isPosb(char chk) {
		int ind=find(ALL(S),chk)-S.begin();

		map<char,int>tmp;
		FOR(j,ind+1,L){
			tmp[S[j]]++;
			if(S[j]==' ')
				return 0;
		}	cout<<" -- ";

		for(it=cnt.begin();it!=cnt.end();it++){	cout<<(*it).first<<": "<<cnt[(*it).first]<<" <> "<<","<<tmp[(*it).first]<<"\n";
			if((*it).second>tmp[(*it).first])
				return 0;}
		return 1;
	}
};

string FoxAndHandle::lexSmallestName(string S_) {
	S=S_;
	L=SZ(S);

	FOR(i,0,L)		cnt[S[i]]++;

	multiset<char>posb;
	for(it=cnt.begin();it!=cnt.end();it++){
		(*it).second/=2;

		FOR(i,0,(*it).second)
			posb.insert((*it).first);
	}

	string fin="";
	while(SZ(posb)){
	
		for(multiset<char>::iterator mIt=posb.begin();mIt!=posb.end();mIt++){
			char chk=(*mIt);	cout<<chk<<" ";
			if(isPosb(chk)){
				fin+=chk;	cout<<"\nYes = "<<fin<<"\n";
				cnt[chk]--;

				int ind=find(ALL(S),chk)-S.begin();
				S[ind]=' ';
				posb.erase(mIt);
				break;
			}	cout<<"\n";
		}
	}
	return fin;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	FoxAndHandle *obj;
	string answer;
	obj = new FoxAndHandle();
	clock_t startTime = clock();
	answer = obj->lexSmallestName(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	
	{
	// ----- test 0 -----
	p0 = "foxfox";
	p1 = "fox";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "ccieliel";
	p1 = "ceil";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "abaabbab";
	p1 = "aabb";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "bbbbaaaa";
	p1 = "bbaa";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "fedcbafedcba";
	p1 = "afedcb";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "nodevillivedon";
	p1 = "deilvon";
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
