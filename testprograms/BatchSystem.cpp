#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long

using namespace std;

class BatchSystem {
public:
	vector <int> schedule(vector <int>, vector <string>);
};

vector <int> BatchSystem::schedule(vector <int> dur, vector <string> user) {
	int N=SZ(dur);
	vector< pair<string,LL> >tot;
	vector< VI >ind;

	FOR(all,0,N){
		bool done=true;
		FOR(srch,0,SZ(tot))
			if(tot[srch].first==user[all]){
				tot[srch].second+=dur[all];
				PB(ind[srch],all);
				done=false;
				break;
			}

		if(done){
			PB(tot,make_pair(user[all],dur[all]));
			PB(ind,VI(1,all));
		}
	}

	FOR(i,0,SZ(tot))
		FOR(j,i+1,SZ(tot)){
			if(tot[j].second<tot[i].second)
				swap(tot[i],tot[j]),swap(ind[i],ind[j]);
			else if(tot[j].second==tot[i].second && ind[j]<ind[i])
				swap(tot[i],tot[j]),swap(ind[i],ind[j]);
		}

	VI ret;
	FOR(all,0,SZ(ind)){
		FOR(fill,0,SZ(ind[all]))
			PB(ret,ind[all][fill]);
	}

	return ret;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <string> p1, bool hasAnswer, vector <int> p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	BatchSystem *obj;
	vector <int> answer;
	obj = new BatchSystem();
	clock_t startTime = clock();
	answer = obj->schedule(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p2[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p2[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <string> p1;
	vector <int> p2;
	
	{
	// ----- test 0 -----
	int t0[] = {400,100,100,100};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"Danny Messer","Stella Bonasera","Stella Bonasera","Mac Taylor"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {3,1,2,0};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {200,200,200};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"Gil","Sarah","Warrick"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0,1,2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {100,200,50};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"Horatio Caine","horatio caine","YEAAAAAAH"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {2,0,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {42863029,53617987,24970877,77828097,51242,55488287,73174032,28915543,15040792,8564629,126792019,45755106,5574621,34144659,6808793,65263189,12446121,126792019,54239800,14708377,14322709,77261063,183031197,78906834,60701818,12136954,35933873,80535700};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"NpkqAVxmmBTG","qStmLcbnwszsWZHlRvHQWNfgTpSMoAum","DfAxCQylYyDhVpfmaUvwTHkyNfNjkhQXcuzdAZgqsPJzrKl","NpkqAVxmmBTG","DfAxCQylYyDhVpfmaUvwTHkyNfNjkhQXcuzdAZgqsPJzrKl","DfAxCQylYyDhVpfmaUvwTHkyNfNjkhQXcuzdAZgqsPJzrKl","qStmLcbnwszsWZHlRvHQWNfgTpSMoAum","nFCmErdwLoOlMboKzYUpVk","nFCmErdwLoOlMboKzYUpVk","uRcQ APlZwDtUSTaX","DCQWnZjdLlyQXztQdXV","NpkqAVxmmBTG","nFCmErdwLoOlMboKzYUpVk","DfAxCQylYyDhVpfmaUvwTHkyNfNjkhQXcuzdAZgqsPJzrKl","uRcQ APlZwDtUSTaX","uRcQ APlZwDtUSTaX","lOTlDHrMelXxAWGNId","X","RXptLFPnszhbJluuKmTLjmmwrPQWjCD tSgGYfGaia","NpkqAVxmmBTG","NpkqAVxmmBTG","nFCmErdwLoOlMboKzYUpVk","lOTlDHrMelXxAWGNId","uRcQ APlZwDtUSTaX","RXptLFPnszhbJluuKmTLjmmwrPQWjCD tSgGYfGaia","DfAxCQylYyDhVpfmaUvwTHkyNfNjkhQXcuzdAZgqsPJzrKl","uRcQ APlZwDtUSTaX","RXptLFPnszhbJluuKmTLjmmwrPQWjCD tSgGYfGaia"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,6,2,4,5,13,25,7,8,12,21,10,17,0,3,11,19,20,9,14,15,23,26,16,22,18,24,27};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
