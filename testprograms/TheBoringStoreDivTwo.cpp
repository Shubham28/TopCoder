#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define MEM(A,B) memset(A,B,sizeof(A))
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long

using namespace std;

class TheBoringStoreDivTwo {
public:
	string find(string, string);
	bool fnd(string &inp,string &chk) {

		EFOR(all,0,SZ(inp)-SZ(chk))
			if(inp.substr(all,SZ(chk))==chk)
				return 1;
		return 0;
	}

	string mn(string &fir,string &sec) {
		if(SZ(fir)<SZ(sec))
			return sec;
		else if(SZ(fir)>SZ(sec))
			return fir;
		else
			return (fir<sec)?fir:sec;
	}
};

string TheBoringStoreDivTwo::find(string Jh, string Br) {
	int N1=SZ(Jh),N2=SZ(Br);
	string ans="";

	FOR(pos1,0,N1)
	EFOR(len1,1,N1-pos1){
		string A=Jh.substr(pos1,len1);

		FOR(pos2,pos1+len1,N1)
		EFOR(len2,1,N1-pos2){
			string B=Jh.substr(pos2,len2);

			FOR(pos3,0,N2)
			EFOR(len3,1,N2-pos3){
				string C=Br.substr(pos3,len3);

				string fir=A+C;
				if(SZ(B)<SZ(fir) && fir.substr(0,SZ(B))==B){
					string rem=fir.substr(SZ(B),SZ(fir)-SZ(B));

					string tmp=Br.substr(0,pos3);
					if(tmp!="" && fnd(tmp,rem))
						ans=mn(ans,fir);

					tmp=Br.substr(pos3+len3,SZ(Br)-pos3-len3);
					if(tmp!="" && fnd(tmp,rem))
						ans=mn(ans,fir);
				}
			}
		}
	}

	return ans;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, string p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	TheBoringStoreDivTwo *obj;
	string answer;
	obj = new TheBoringStoreDivTwo();
	clock_t startTime = clock();
	answer = obj->find(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = "StoreOfJohn";
	p1 = "StoreOfBrus";
	p2 = "or";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "JohnAndJohn";
	p1 = "John";
	p2 = "";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "JohnPlaysGames";
	p1 = "BrusAlsoPlays";
	p2 = "ays";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "abacaba";
	p1 = "abacabadabacaba";
	p2 = "abaabacaba";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "aay";
	p1 = "sys";
	p2 = "ays";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
