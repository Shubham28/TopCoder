#include <algorithm>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <vector>
#include <map>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define MEM(A,B) memset(A,B,sizeof(A))
#define SZ(A) int(A.size())
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define VI vector<int>
#define VS vector<string>
#define LL long long

using namespace std;

int N;
VI prc;
vector<LL>dr;
bool used[51];

bool cmpr(const int a,const int b) {
	return (dr[a]>dr[b]);
}

class MonstersValley {
public:
	int minimumPrice(vector<long long>, vector <int>);

	bool isPosb() {
		int ini=0;
		FOR(i,0,N){
			if(used[i])
				ini+=dr[i];
			else if(ini<dr[i])
				return 0;
		}
		return 1;
	}
};

int MonstersValley::minimumPrice(vector<long long> dread, vector <int> price) {
	prc=price,dr=dread;
	N=SZ(prc);
	VI ones,twos;

	FOR(i,0,N){
		used[i]=1;

		if(prc[i]==1){
			PB(ones,i);
		} else 
			PB(twos,i);
	}
	sort(ALL(ones),cmpr);
	sort(ALL(twos),cmpr);

	int tot=0;
	while(SZ(ones)+SZ(twos)){
		bool is2,is11,is12;
		int sec=-1,fir1=-1,fir2=-1;

		if(SZ(twos)){
			sec=twos[SZ(twos)-1];
			used[sec]=0;
			is2=isPosb();
			used[sec]=1;

			if(!is2){
				twos.pop_back();
				continue;
			}
		}
		if(SZ(ones)){
			fir1=ones[SZ(ones)-1];
			used[fir1]=0;
			is11=isPosb();
			used[fir1]=1;

			if(!is11){
				ones.pop_back();
				continue;
			}
		}
		if(SZ(ones)-1){
			fir2=ones[SZ(ones)-2];
			used[fir2]=0;
			is12=isPosb();
			used[fir2]=1;

			if(!is12){
				int tmp=ones[SZ(ones)-1];
				ones.pop_back();		ones.pop_back();
				PB(ones,tmp);
				continue;
			}
		}	cout<<fir1<<","<<fir2<<" "<<sec<<"\n";
		if(sec!=-1 && fir1!=-1 && fir2!=-1){
			if(dr[sec]<=dr[fir1]+dr[fir2])
				used[sec]=0;
			else
				used[fir1]=used[fir2]=0;
		} else
			break;
	}
	int sec,fir;
	if(SZ(twos) && SZ(ones)){
		sec=twos[SZ(twos)-1];
		used[sec]=0;
		bool s=isPosb();
		used[sec]=1;

		fir=ones[SZ(ones)-1];
		used[fir]=0;
		bool f=isPosb();
		used[fir]=1;

		if(f && s)
			used[(dr[sec]<=dr[fir])?sec:fir]=0;
	}


	while(SZ(twos)){
		sec=twos[SZ(twos)-1];
		used[sec]=0;
		if(!isPosb())		used[sec]=1;
		twos.pop_back();
	}
	while(SZ(ones)){
		fir=ones[SZ(ones)-1];
		used[fir]=0;
		if(!isPosb())			used[fir]=1;
		ones.pop_back();
	}

	FOR(i,0,N)
		tot+=((used[i])?dr[i]:0);

	return tot;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector<long long> p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	MonstersValley *obj;
	int answer;
	obj = new MonstersValley();
	clock_t startTime = clock();
	answer = obj->minimumPrice(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector<long long> p0;
	vector <int> p1;
	int p2;
	
	{
	// ----- test 0 -----
	long long t0[] = {8ll,5ll,10ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,1,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	long long t0[] = {1ll,2ll,4ll,1000000000ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,1,1,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 5;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	long long t0[] = {200ll,107ll,105ll,206ll,307ll,400ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,1,1,1,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	long long t0[] = {5216ll,12512ll,613ll,1256ll,66ll,17202ll,30000ll,23512ll,2125ll,33333ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,2,1,1,1,1,2,1,2,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 5;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
