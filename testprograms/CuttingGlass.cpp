#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <bitset>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long

using namespace std;

class CuttingGlass {
public:
	int pieces(int, int, int, int, vector <string>);
};

int CuttingGlass::pieces(int W, int H, int iniX, int iniY, vector <string> prog) {
	string tmp;
	EFOR(fill,0,2*W)
		PB(tmp,'.');

	VS edges(2*H+1,tmp);
	int R=SZ(edges),C=SZ(edges[0]);

	FOR(boun,0,R)
		edges[boun][0]='x',edges[boun][C-1]='x';
	FOR(boun,0,C)
		edges[0][boun]='x',edges[R-1][boun]='x';

	int stR=iniY*2,stC=iniX*2;
	FOR(mov,0,SZ(prog))
		FOR(each,0,SZ(prog[mov])){

			switch(prog[mov][each]){
				case 'U':
					edges[stR][stC]='x',edges[stR-1][stC]='x',edges[stR-2][stC]='x';
					stR-=2;
					break;
				case 'D':
					edges[stR][stC]='x',edges[stR+1][stC]='x',edges[stR+2][stC]='x';
					stR+=2;
					break;
				case 'L':
					edges[stR][stC]='x',edges[stR][stC-1]='x',edges[stR][stC-2]='x';
					stC-=2;
					break;
				case 'R':
					edges[stR][stC]='x',edges[stR][stC+1]='x',edges[stR][stC+2]='x';
					stC+=2;
					break;
			}
		}

	int cnt=0;
	int movX[]={-1,0,0,1};
	int movY[]={0,-1,1,0};

	FOR(row,0,R)
		FOR(col,0,C)
			if(edges[row][col]=='.'){
				++cnt;

				queue<int>xCor,yCor;
				xCor.push(row);
				yCor.push(col);
				edges[row][col]='#';

				while(!xCor.empty()){
					int prsX=xCor.front(),prsY=yCor.front();
					xCor.pop();
					yCor.pop();

					FOR(move,0,4){
						int posX=prsX+movX[move],posY=prsY+movY[move];
						if(0<=posX && posX<R && 0<=posY && posY<C && edges[posX][posY]=='.'){
							edges[posX][posY]='#';
							xCor.push(posX);
							yCor.push(posY);
						}
					}
				}
			}

	return cnt;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, vector <string> p4, bool hasAnswer, int p5) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << "{";
	for (int i = 0; int(p4.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p4[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	CuttingGlass *obj;
	int answer;
	obj = new CuttingGlass();
	clock_t startTime = clock();
	answer = obj->pieces(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p5 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p5;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	vector <string> p4;
	int p5;
	
	{
	// ----- test 0 -----
	p0 = 100;
	p1 = 100;
	p2 = 50;
	p3 = 50;
	string t4[] = {"ULDR"};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 10;
	p1 = 10;
	p2 = 3;
	p3 = 4;
	string t4[] = {"UDUDUDUDUDU"};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 3;
	p1 = 3;
	p2 = 0;
	p3 = 0;
	string t4[] = {"RDDDUUU","RDDDUUU","R","DLLLRRR","DLLL"};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 9;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 5;
	p1 = 3;
	p2 = 5;
	p3 = 3;
	string t4[] = {"LULLULLU"};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 2;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 3;
	p1 = 3;
	p2 = 0;
	p3 = 2;
	string t4[] = {"UURRRDDDLLLU"};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 1;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
