#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long

using namespace std;

struct node{
	int to,wght;
	struct node *next;
};

class CableDonation {
public:
	int cable(vector <string>);
	int N;

	int weight(char node){
		int val;

		if(node=='0')
			return 0;

		if('a'<=node && node<='z')
			val=node-'a'+1;
		else
			val=node-'A'+27;

		return val;
	}

	int Prims(struct node *vert[]){
		VI dist(N,99999999);
		VB span(N,false);

		int prsn=0;
		dist[prsn]=0;
		while(span[prsn]==false){
			span[prsn]=true;
			struct node *tmp;
			tmp=vert[prsn];

			while(tmp!=NULL){
				int tmpto=tmp->to,tmpwt=tmp->wght;
				if(span[tmpto]==false && dist[tmpto]>tmpwt)
					dist[tmpto]=tmpwt;
				tmp=tmp->next;
			}
			int minim=99999999;
			FOR(chk,0,N)
				if(span[chk]==false && minim>dist[chk])
					minim=dist[chk],prsn=chk;
		}
		return accumulate(ALL(dist),0);
	}
};

int CableDonation::cable(vector <string> len) {
	VS newlen;
	newlen=len;
	N=SZ(len);

	FOR(row,0,N)
		FOR(col,row,N){
			char fir=len[row][col],sec=len[col][row],fin;
			if(fir=='0' && sec=='0')
				fin='0';
			else if(fir=='0')
				fin=sec;
			else if(sec=='0')
				fin=fir;
			else if(weight(fir)<=weight(sec))
				fin=fir;
			else
				fin=sec;

			newlen[row][col]=fin,newlen[col][row]=fin;
		}

	struct node *vert[N];
	FOR(nll,0,N)
		vert[nll]=NULL;

	FOR(fir,0,N)
		FOR(sec,0,N)
			if(newlen[fir][sec]!='0'){
				struct node *tmp;
				tmp=new node;
				tmp->to=sec,tmp->wght=weight(newlen[fir][sec]);
				tmp->next=vert[fir];
				vert[fir]=tmp;
			}

	int minspan=Prims(vert);
	if(minspan>999999)
		return -1;

	int tot=0;
	FOR(row,0,N)
		FOR(col,0,N)
			tot+=weight(len[row][col]);

	return tot-minspan;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	CableDonation *obj;
	int answer;
	obj = new CableDonation();
	clock_t startTime = clock();
	answer = obj->cable(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"abc","def","ghi"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 40;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"a0","0b"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"0X00","00Y0","0000","00Z0"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"Az","aZ"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 105;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"0top","c0od","er0o","pen0"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 134;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
