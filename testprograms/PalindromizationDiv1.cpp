#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <string.h>
#include <cstdlib>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define MEM(A,B) memset(A,B,sizeof(A))
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long

using namespace std;

class PalindromizationDiv1 {
public:
	int getMinimumCost(string, vector <string>);
};

int PalindromizationDiv1::getMinimumCost(string wd, vector <string> op) {
	LL add[26],ers[26];
	LL chng[26][26];

	char A[]="add",E[]="erase";
	char fir[10];
	char tmp1,tmp2;
	int vl;

	LL INF=99999999999ll;

	FOR(f1,0,26){
		add[f1]=ers[f1]=INF;

		FOR(f2,0,26)		chng[f1][f2]=INF;
		chng[f1][f1]=0;
	}

	FOR(a,0,SZ(op)){
		sscanf(op[a].c_str(),"%s",fir);

		if(strcmp(fir,A)==0){
			sscanf(op[a].c_str(),"%s %c %d",fir,&tmp1,&vl);
			add[tmp1-'a']=vl;
		} else if(strcmp(fir,E)==0){
			sscanf(op[a].c_str(),"%s %c %d",fir,&tmp1,&vl);
			ers[tmp1-'a']=vl;
		} else {
			sscanf(op[a].c_str(),"%s %c %c %d",fir,&tmp1,&tmp2,&vl);
			chng[tmp1-'a'][tmp2-'a']=vl;
		}
	}

	FOR(k,0,26)
		FOR(i,0,26)		FOR(j,0,26){
			chng[i][j]<?=chng[i][k]+chng[k][j];
		}

	FOR(fr,0,26)	FOR(to,0,26){
		ers[fr]<?=chng[fr][to]+ers[to];
		add[fr]<?=add[to]+chng[to][fr];
	}

	LL cost[55][55];
	FOR(ps,0,55){
		cost[ps][0]=cost[ps][1]=0;
		FOR(ln,2,55)	cost[ps][ln]=INF;
	}

	int N=SZ(wd);
	EFOR(len,2,N)
		EFOR(start,0,N-len){

			int str=wd[start]-'a';
			int lst=wd[start+len-1]-'a';

			LL &tmp=cost[start][len];
			tmp<?=cost[start+1][len-2]+chng[str][lst];

			FOR(bc,0,26){
				tmp<?=cost[start][len-1]+add[bc]+chng[lst][bc];
				tmp<?=cost[start+1][len-1]+add[bc]+chng[str][bc];

				tmp<?=cost[start+1][len-1]+ers[str];
				tmp<?=cost[start][len-1]+ers[lst];

				tmp<?=cost[start+1][len-2]+chng[str][bc]+chng[lst][bc];
			}
		}

	if(cost[0][N]>=INF)		return -1;

	return (int)cost[0][N];
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, vector <string> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	PalindromizationDiv1 *obj;
	int answer;
	obj = new PalindromizationDiv1();
	clock_t startTime = clock();
	answer = obj->getMinimumCost(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	vector <string> p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = "racecar";
	p1.clear() /*{}*/;
	p2 = 0;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "topcoder";
	string t1[] = {"erase t 1","erase o 1","erase p 1","erase c 1","erase d 1","erase e 1","erase r 1"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 5;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "topcoder";
	string t1[] = {"erase t 10","erase o 1","erase p 1","erase c 1","erase d 1","erase e 1","erase r 1"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 7;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "caaaaaab";
	string t1[] = {"change b a 100000","change c a 100000","change c d 50000","change b e 50000","erase d 50000","erase e 49999"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 199999;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "moon";
	string t1[] = {"erase o 5","add u 7","change d p 3","change m s 12","change n d 6","change s l 1"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = -1;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "ltbgpjcsaknlzctionkqffrpevmybpptydvizassekdoznkln";
	string t1[] = {"change g n 47673","erase r 77264","change l t 42081","add r 4800","add b 96464","erase k 51662","change b n 39898","erase d 22461","erase g 27854","change p u 14295","add d 51496","add e 75369","add o 87389","change t z 27185","change c z 71695","change b l 54216","add i 19003","add f 27638","add u 85866","change j u 67802","erase t 57582","erase i 22054","add k 10000","change q b 34740","add q 72938","change x m 44234","erase s 36666","erase b 14907","add h 69181","erase f 99058","change p b 90898","erase l 21277","add x 32316","change c m 85633","change v o 96383","change y u 61797","change h v 19755","change p r 8901","change n h 99960"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1629924;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
