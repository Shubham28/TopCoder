#include <algorithm>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <vector>
#include <map>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define MEM(A,B) memset(A,B,sizeof(A))
#define SZ(A) int(A.size())
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define VI vector<int>
#define PII pair<int,int>
#define LL long long

using namespace std;

class MagicalHats {
public:
	int findMaximumReward(vector <string>, vector <int>, int);

	vector< PII >hPos;
	VI cns;

	int dp[1600000];
	int R,C;
	int nHat,nCoins,numG;
	int pow3[15],rCnt[15],cCnt[15];

	int setDigit(int state, int at, int newDigit){
		return (state/pow3[at+1])*pow3[at+1] + newDigit*pow3[at] + state%pow3[at];
	}

	int checkDigit(int state, int at){
		return (state/pow3[at])%3;
	}

	int F(int state, int cnsPlaced, int hats){

		if(hats==nHat){
			if(cnsPlaced!=nCoins)		return -50;

			FOR(i,0,R)
				if(rCnt[i]%2==1)		return -50;
			FOR(i,0,C)
				if(cCnt[i]%2==1)		return -50;
			return 0;
		}

		int &ret=dp[state];
		if(ret!=-1)
			return ret;

		ret=-50;
		FOR(i,0,nHat){
			int r=hPos[i].first,c=hPos[i].second;
			int d=checkDigit(state,i);
	
			//	Not visited
			if(d==0){
				int res1=-50,next;
	
				//	Has a coin under it; State represented by 1
				if(cnsPlaced<nCoins){
					int profit=(hats<numG);
					next=setDigit(state,i,1);
					rCnt[r]+=2,cCnt[c]+=2;
					res1=profit+F(next,cnsPlaced+1,hats+1);
	
					rCnt[r]-=2,cCnt[c]-=2;
				}
	
				//	No coin under it; State represented by 2
				rCnt[r]++,cCnt[c]++;
				next=setDigit(state,i,2);
				int res2=F(next,cnsPlaced,hats+1);
	
				rCnt[r]--,cCnt[c]--;
	
				if(res1<0)
					ret=max(ret,res2);
				if(res2<0)
					ret=max(ret,res1);
				else
					ret=max(ret,res1<?res2);
			}
		}
		return ret;
	}
};

int MagicalHats::findMaximumReward(vector <string> brd, vector <int> coins, int numGuesses) {
	numG=numGuesses,cns=coins;
	SORT(cns);

	R=SZ(brd),C=SZ(brd[0]);

	FOR(i,0,R)		FOR(j,0,C)
		if(brd[i][j]=='H')
			PB(hPos,PII(i,j));

	nHat=SZ(hPos),nCoins=SZ(cns);
	MEM(rCnt,0);		MEM(cCnt,0);

	pow3[0]=1;
	EFOR(i,1,nHat)
		pow3[i]=pow3[i-1]*3;

	MEM(dp,-1);
	int opt=F(0,0,0);
	if(opt<0)
		return -1;

	int ret=0;
	FOR(i,0,opt)
		ret+=cns[i];

	return ret;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <int> p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	MagicalHats *obj;
	int answer;
	obj = new MagicalHats();
	clock_t startTime = clock();
	answer = obj->findMaximumReward(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <int> p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	string t0[] = {"H"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	p3 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"HHH","H.H","HH."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {9};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	p3 = 9;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"HH","HH"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	p3 = 6;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"HHH","HHH","H.H"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {13,13,13,13};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	p3 = 13;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"HHH","HHH","H.H"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {13,13,13,13};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	p3 = 26;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
/*
	{
	// ----- test 5 -----
	string t0[] = {"H.H.",".H.H","H.H."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {17};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 6;
	p3 = -1;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	string t0[] = {"HHH","H.H","HHH","H.H","HHH"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {33,337,1007,2403,5601,6003,9999};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 5;
	p3 = 1377;
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	string t0[] = {".............",".............",".............",".............",".............",".............",".....H.H.....","......H......",".....H.H.....",".............",".............",".............","............."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {22};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	p3 = 22;
	all_right = KawigiEdit_RunTest(7, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
*/
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
