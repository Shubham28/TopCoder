#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long

using namespace std;

class PrimeStatistics {
public:
	int mostCommonRemainder(int, int, int);

VI SieveRange(int L,int U)
{
	int range=U-L+1;

	VB chk(range,true);

	for(int i=(L%2==0)?0:1;i<range;i+=2)
		chk[i]=false;

	for(int i=3;i*i<=U;i+=2){

		if(i>L && !chk[i-L])
			continue;

		int j=(L/i)*i;
		if(j<L)
			j+=i;
		if(j==i)
			j+=i;
		j-=L;

		for(;j<range;j+=i)
			chk[j]=false;
	}

	if(L==1)
		chk[1-L]=false;
	if(L<=2)
		chk[2-L]=true;

	VI ret;
	FOR(i,0,range)
		if(chk[i])
			PB(ret,(L+i));

	return ret;
}

};

int PrimeStatistics::mostCommonRemainder(int lo, int up, int mod) {
	VI prm=SieveRange(lo,up);
	map<int,int>cnt;
	FOR(all,0,SZ(prm))
		++cnt[prm[all]%mod];

	if(SZ(cnt)==0)
		return 0;

	int ans,maxcnt=0;
	for(map<int,int>::iterator iall=cnt.begin();iall!=cnt.end();iall++)
		if(maxcnt<(*iall).second)
			ans=(*iall).first,maxcnt=(*iall).second;

	return ans;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	PrimeStatistics *obj;
	int answer;
	obj = new PrimeStatistics();
	clock_t startTime = clock();
	answer = obj->mostCommonRemainder(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = 3;
	p1 = 14;
	p2 = 5;
	p3 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3;
	p1 = 33;
	p2 = 1000;
	p3 = 3;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 25;
	p1 = 27;
	p2 = 17;
	p3 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 1;
	p1 = 200000;
	p2 = 2;
	p3 = 1;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 1;
	p1 = 1000;
	p2 = 6;
	p3 = 5;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
