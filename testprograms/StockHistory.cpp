#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <bitset>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long

using namespace std;

class StockHistory {
public:
	int maximumEarnings(int, int, vector <string>);
};

int StockHistory::maximumEarnings(int init, int monthly, vector <string> stocks) {
	vector< VI >stks(SZ(stocks));

	FOR(conv,0,SZ(stocks)){
		stringstream extr;
		stocks[conv]+=" ";
		extr<<stocks[conv];
		int val;
		while(extr>>val)
			PB(stks[conv],val);
	}
	int N=SZ(stks[0]),mnths=SZ(stks);
	double tot=0.0,best=1.0,invested=0.0;

	RFOR(mn,mnths-2,0){

		FOR(stk,0,N){
			double pr=stks[mnths-1][stk]/double(stks[mn][stk]);
			best>?=pr;
		}
		double amount=(mn==0)?init:monthly;
		invested+=amount;
		tot+=(amount*best);
	}
	return int(tot-invested+0.5);

}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <string> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p2[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	StockHistory *obj;
	int answer;
	obj = new StockHistory();
	clock_t startTime = clock();
	answer = obj->maximumEarnings(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	vector <string> p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = 1000;
	p1 = 0;
	string t2[] = {"10 20 30","15 24 32"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 500;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 1000;
	p1 = 0;
	string t2[] = {"10","9"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 100;
	p1 = 20;
	string t2[] = {"40 50 60","37 48 55","100 48 50","105 48 47","110 50 52","110 50 52","110 51 54","109 49 53"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 239;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 1513;
	p1 = 416;
	string t2[] = {"279","733","596","264","684","593","43","104","876","125","364","635","47","575","389","685","773","14","469","508","358","350","437","924","399","601","802","714","622","408","211","256","953","797","143","415","855","198","870","690","898","709","660","599","593","616","222","320","465"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 298454;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
