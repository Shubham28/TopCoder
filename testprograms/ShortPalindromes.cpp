#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long

using namespace std;

class ShortPalindromes {
public:
	string shortest(string);
};

string ShortPalindromes::shortest(string base) {
	int N=SZ(base);
	string palin[N+1][N+1];

	EFOR(len,1,N)
		EFOR(start,0,N-len){
			string chk=base.substr(start,len);
			string rev=chk;
			reverse(ALL(rev));

			if(chk==rev)
				palin[start][start+len]=chk;
			else if(chk[0]==chk[SZ(chk)-1]){
				string eq=palin[start+1][start+len-1];
				palin[start][start+len]=chk.substr(0,1)+eq+chk.substr(0,1);
			} else {
				string fir=palin[start+1][start+len];
				string sec=palin[start][start+len-1];
				fir=chk.substr(0,1)+fir+chk.substr(0,1);
				sec=chk.substr(SZ(chk)-1,1)+sec+chk.substr(SZ(chk)-1,1);

				if(SZ(fir)<SZ(sec))
					palin[start][start+len]=fir;
				else if(SZ(fir)>SZ(sec))
					palin[start][start+len]=sec;
				else
					palin[start][start+len]=min(fir,sec);
			}
		}

	return palin[0][N];
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	ShortPalindromes *obj;
	string answer;
	obj = new ShortPalindromes();
	clock_t startTime = clock();
	answer = obj->shortest(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	
	{
	// ----- test 0 -----
	p0 = "RACE";
	p1 = "ECARACE";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "TOPCODER";
	p1 = "REDTOCPCOTDER";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "Q";
	p1 = "Q";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "MADAMIMADAM";
	p1 = "MADAMIMADAM";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "ALRCAGOEUAOEURGCOEUOOIGFA";
	p1 = "AFLRCAGIOEOUAEOCEGRURGECOEAUOEOIGACRLFA";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
