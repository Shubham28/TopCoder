#include <algorithm>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <vector>
#include <map>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define MEM(A,B) memset(A,B,sizeof(A))
#define SZ(A) int(A.size())
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define VI vector<int>
#define VS vector<string>
#define LL long long

const int MX=500;

using namespace std;

class PastingPaintingDivOne {
public:
	vector<long long> countColors(vector <string>, int);

	VS clip;
	char brd[600][600];
	int R,C;

	vector<LL> simulate(int T) {
		FOR(r,0,MX)		FOR(c,0,MX)
			brd[r][c]='.';

		FOR(i,0,T){
			FOR(r,0,R)		FOR(c,0,C)
				brd[i+r][i+c]=(clip[r][c]!='.')?clip[r][c]:brd[i+r][i+c];
		}

		vector<LL>ret(3,0);
		FOR(r,0,MX)		FOR(c,0,MX){
			if(brd[r][c]=='R')		++ret[0];
			if(brd[r][c]=='G')		++ret[1];
			if(brd[r][c]=='B')		++ret[2];
		}
		return ret;	
	}
};

vector<long long> PastingPaintingDivOne::countColors(vector <string> clip_, int T) {
	clip=clip_;
	R=SZ(clip),C=SZ(clip[0]);

	if(T<110)
		return simulate(T);

	int L=R>?C;

	simulate(2*L+4);
	LL cR=0,cG=0,cB=0;

	EFOR(cl,0,3*L+5){
		if(brd[L+2][cl]=='R')		++cR;
		if(brd[L+2][cl]=='G')		++cG;
		if(brd[L+2][cl]=='B')		++cB;
	}

	vector<LL>cnt(3,0);

	FOR(rw,0,L)		EFOR(cl,0,3*L+5){
		if(brd[rw][cl]=='R')		++cnt[0];
		if(brd[rw][cl]=='G')		++cnt[1];
		if(brd[rw][cl]=='B')		++cnt[2];
	}

	FOR(rw,0,L)		EFOR(cl,0,3*L+5){
		if(brd[2*L+3 + rw][cl]=='R')		++cnt[0];
		if(brd[2*L+3 + rw][cl]=='G')		++cnt[1];
		if(brd[2*L+3 + rw][cl]=='B')		++cnt[2];
	}

	cnt[0]+=cR*(T-L-1);
	cnt[1]+=cG*(T-L-1);
	cnt[2]+=cB*(T-L-1);

	return cnt;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, vector<long long> p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	PastingPaintingDivOne *obj;
	vector<long long> answer;
	obj = new PastingPaintingDivOne();
	clock_t startTime = clock();
	answer = obj->countColors(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p2[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p2[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	vector<long long> p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"..G","R..","BG."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	long long t2[] = {3ll,4ll,3ll};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"R...","....","....","...R"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	long long t2[] = {4ll,0ll,0ll};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"RGB"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 100000;
	long long t2[] = {100000ll,100000ll,100000ll};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1000000000;
	long long t2[] = {0ll,0ll,0ll};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"RB.",".G."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 100;
	long long t2[] = {100ll,1ll,100ll};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"..........G..........",".........G.G.........","........G...G........",".......G.....G.......","......G..B.B..G......",".....G...B.B...G.....","....G...........G....","...G...R.....R...G...","..G.....RRRRRR....G..",".G..........RR.....G.","GGGGGGGGGGGGGGGGGGGGG"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1000000000;
	long long t2[] = {2000000018ll,17000000048ll,2000000005ll};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
