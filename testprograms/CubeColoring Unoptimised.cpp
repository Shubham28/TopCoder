#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long

using namespace std;

class CubeColoring {
public:
	long long theCount(vector <string>);
};

long long CubeColoring::theCount(vector <string> colors) {
	int N=SZ(colors[0]);
	LL ans=0;

	FOR(ze,0,N)
	FOR(se,0,N)
	FOR(fi,0,N)
	FOR(sev,0,N)
		if(colors[0][ze]=='Y' && colors[2][se]=='Y' && colors[5][fi]=='Y' && colors[7][sev]=='Y'){
			int first=0;
			FOR(fir,0,N)	if(ze!=fir && se!=fir && fi!=fir && colors[1][fir]=='Y')	++first;
			int third=0;
			FOR(thr,0,N)	if(ze!=thr && se!=thr && sev!=thr && colors[3][thr]=='Y')	++third;
			int fourth=0;
			FOR(four,0,N)	if(ze!=four && fi!=four && sev!=four && colors[4][four]=='Y')	++fourth;
			int sixth=0;
			FOR(six,0,N)	if(fi!=six && se!=six && sev!=six && colors[6][six]=='Y')	++sixth;

			ans+=(first*third*fourth*sixth);
		}

	return ans;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, long long p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	CubeColoring *obj;
	long long answer;
	obj = new CubeColoring();
	clock_t startTime = clock();
	answer = obj->theCount(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	long long p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"Y","Y","Y","Y","Y","Y","Y","Y"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0ll;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"YNNNNNNN","NYNNNNNN","NNYNNNNN","NNNYNNNN","NNNNYNNN","NNNNNYNN","NNNNNNYN","NNNNNNNY"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1ll;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"YNNYN","YYYYY","NYYNY","YNYYN","YNNYY","YNNYY","NNNYY","NYYYY"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 250ll;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"YNNYN","YYYYY","NNNNN","YNYYN","YNNYY","YNNYY","NNNYY","NYYYY"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0ll;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"YNNYNYYYYYNN","NNNYNYYNYNNY","YYNNYYNNNYYN","YYYYYNNYYYNN","NNNYYYNNYNYN","YYYNYYYYNYNN","NNNNNNYYNYYN","NNYNYYNNYNYY"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 611480ll;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"NYYYYNYYYYYYNYNYN","YYYYYYYNYYYYYYYYY","NYYNYYYYNYNNNYNNY","YNYYYYNNYNNYNYNYY","NYNYYNYNYYYNYYNNN","YYYYYYYYYYNYNYYYY","YYYYYNYYYNYYYYYYN","NYYYYNYNYNYYYNYYY"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 189758917ll;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
