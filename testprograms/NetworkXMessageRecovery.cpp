#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define MEM(A,B) memset(A,B,sizeof(A))
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long

using namespace std;

//	Very concise solution by vexorian in Practice Room

class NetworkXMessageRecovery {
public:
	string recover(vector <string>);

	int conv(char ch) {
		return ((ch<='Z')?(ch-'A'):26+(ch-'a'));
	}
};

string NetworkXMessageRecovery::recover(vector <string> mes) {
	int grph[60][60];
	bool used[60];
	MEM(grph,-1);		MEM(used,0);

	int N=SZ(mes);
	FOR(a,0,N){
		int L=SZ(mes[a]);

		FOR(ps,0,L-1){
			int val1=conv(mes[a][ps]);
			int val2=conv(mes[a][ps+1]);

			grph[val1][val2]=1;		grph[val2][val1]=0;
			used[val1]=used[val2]=1;
		}
		int val=conv(mes[a][L-1]);
		used[val]=1;
	}

	FOR(in,0,52)	FOR(fr,0,52)	FOR(to,0,52){
		if(fr!=to && grph[fr][in]==1 && grph[in][to]==1)
			grph[fr][to]=1,grph[to][fr]=0;
	}

	string ret;
	while(1){
		bool fin=1;
		FOR(rw,0,52)	FOR(cl,0,52)
			if(grph[rw][cl]!=-1){
				fin=0;
				break;
			}

		if(fin){
			FOR(pr,0,52)
				if(used[pr])
					PB(ret,(pr<=25)?('A'+pr):('a'+pr-26));
			break;
		}

		int nxt,mn=999;
		FOR(all,0,52){
			if(!used[all])		continue;

			int deg=0;
			FOR(ps,0,52)
				if(grph[all][ps]==0)
					deg++;

			if(deg<mn){
				nxt=all;
				mn=deg;
			}
		}

		PB(ret,(nxt<=25)?('A'+nxt):('a'+nxt-26));

		used[nxt]=0;
		MEM(grph[nxt],-1);
		FOR(rem,0,52)
			if(grph[rem][nxt]==0)
				grph[rem][nxt]=-1;
	}

	return ret;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	NetworkXMessageRecovery *obj;
	string answer;
	obj = new NetworkXMessageRecovery();
	clock_t startTime = clock();
	answer = obj->recover(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	string p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"acd","bce"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "abcde";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"ed","dc","cb","ba"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "edcba";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"Fox","Ciel","FoxCiel"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "FoxCiel";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"a","A"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Aa";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"cz","za","xy"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "cxyza";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"PYFHWkbrjvJADTKeBiGmQSM","yZYLHWkblCqrjdufNDKehoBpiRm","yZXFLWbCwdzsJOBpciRm","XYFLWktblCqrjvUdzuKhoBiR","IPFHblvUdzuNOVxTKhBpciRmM","yZXYWblrjvzsuNODTKehoBpiSMg","IyatCqvUAOVxDKehoiGmQSM","PYHWkbwrjvJANOxDThBQSMg","IPXYLktlqrsfOxhiRGmQSMg","IyZYFktblwqvduAOcGQMg","yZFHktCqrjvzuAOxDociRmM","XYLWaktblCqdJfANxhoBRGSg","yZLtbCwqvUsJANOVxKehoBimQSg","PyXLWatCwvdufAVxDBciRGg","yYLHblwqrUzuJAVDBpcim","XYFLWbCrvUdsufANOVxDTKeoBcRQS","yZXYFWktbCrjzuJANepiRM","IPZXYLkblCwrjvduJfANTehBpcimQS","yYLHWabwqjvUdzsfVxTKeciRGm","PyZXYLbwrjzJANOVoBciRGmQSM","yZLtblCqrUuJfNODKocmQSg","PyZXYLHWatblwqrjvzsANOVTKehBimQg","IPyZYLWatCwqjdsNxhoBpcRG","IPZXLHWalCvUdzsNxTKeoBpciRSMg","IPyYatblCwrjvUdsAKhoiGmSM","IPyZXYWtblqvUdzsuANOxDhBciGmMg","IyXFHWkqvzJNOVhoBcmQSM","IZXYFLHaqrzuOxTKehpiGm","IPyXFLtbljvUsANOxDKepcRSg","PyXHtbqrvUdsJNVxKoBRmQS","IPLHWaktbwrjUdsuJANKBpRGQSM","yYHWajzufOVDhopiRG","ZXYFLbwqjzsJfAxToBGQSMg","IPyZFWatblCwqsufANVxDKhoiRGM","yZXYFaktlwrjvdsuJfAOVxDhociRmQSg","PyZXLWkbCjvuJfANOxTKoBpcG"
			"mMg","IyZXFLHakblwqjvUJANxhBmQSg","IyZXYFLablCwrjvUzuJfADoGQ","IyXakbqrUdsJANxDTBciGmM","ZHWablwjuJVDTecRmSMg","IZHalCjvUdzuJANxeoRQSMg","IyZLaCwqdzsuJfANThociGQSM","XFLHtlCqrvUdfNTKehBpRSMg","LHWqrdJANDTKcimQg","PZaktwdzfANVxDKehBcimg","PyZYHWatCwqrvdzsuAVxTKhoBcGmS","IZYLktCwrjUzufNOxDTBpGQSg","XHakbCqjzuJANOVDcimS","PyXFHtblqvUdsJfANDThopRGmQSMg","IyXLHWtwqrjsJfOxKhBpimSMg"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "IPyZXYFLHWaktblCwqrjvUdzsuJfANOVxDTKehoBpciRGmQSMg";
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	string t0[] = {"q","M","q","LY","q","Z","c","y","Ae","q"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "ALMYZceqy";
	all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	string t0[] = {"p","Ad","s","p","f","Y","s","f","e","f","f","f","f","e","f","s","s","f","f","f","f","Ad","eY","ps","f","f","f","p","f","f","f","f","s","ps","s","p","f","p","p","f","f","dw","f","S","f","p","eOY","s","ps","ps"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "ASdeOYfpsw";
	all_right = KawigiEdit_RunTest(7, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
