#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long

using namespace std;

class PackingShapes {
public:
	vector <string> tryToFit(int, int, vector <string>);

	pair<double,double> rotate(pair<double,double>cord,double ang) {
		double PI=2.0*asin(1);
		double tht=ang*PI/180.0;	//cout<<ang<<" \t"<<cord.first<<","<<cord.second<<"   ";

		pair<double,double>ret;
		ret.first=cord.first*cos(tht)-cord.second*sin(tht);
		ret.second=cord.first*sin(tht)+cord.second*cos(tht);	//cout<<ret.first<<","<<ret.second<<"\n";

		return ret;
	}
};

vector <string> PackingShapes::tryToFit(int wid, int len, vector <string> shap) {
	int N=SZ(shap);
	VS ans(N);
	if(wid<len)
		swap(wid,len);

	FOR(all,0,N){
		stringstream word;
		word<<shap[all];
		string fig;
		word>>fig;

		if(fig=="CIRCLE"){
			int rad;
			word>>rad;
			if(rad*2<=(wid<?len))
				ans[all]="YES";
			else
				ans[all]="NO";
		} else {
			int fir,sec;
			word>>fir>>sec;

			if(fir<sec)
				swap(fir,sec);

			if(fir<=wid && sec<=len)
				ans[all]="YES";
			else if( (fir>wid && sec>len) || (fir==wid && sec>len) || (fir>wid && sec==len) )
				ans[all]="NO";
			else if(sec<len){
				double lo=0.0,hi=90.0;
				while((hi-lo)>1e-6){
					double mid=lo+(hi-lo)/2.0;
					pair<double,double>botr=rotate(make_pair(fir/2.0,sec/(-2.0)),mid);//cout<<botr.first<<","<<botr.second<<"  ";
					if(botr.first==(wid/2.0-1e-12)){
						hi=mid;
						break;
					} else if(botr.first<(wid/2.0-1e-12))
						hi=mid;
					else
						lo=mid;	//	cout<<mid<<"\n";
				}
				pair<double,double>fin=rotate(make_pair(fir/2.0,sec/(-2.0)),hi);//	cout<<"\nchk "<<fin.first<<","<<fin.second<<"\n";
//cout<<hi<<":  "<<(fin.first<=wid/2.0)<<":"<<(fin.second<=len/2.0)<<"\n";
				if(fin.first<=(wid/2.0-1e-12) && fin.second<=(len/2.0-1e-12))
					ans[all]="YES";
				else
					ans[all]="NO";
			} else {
				double lo=-90.0,hi=0.0;
				while((hi-lo)>1e-6){
					double mid=lo+(hi-lo)/2.0;
					pair<double,double>botr=rotate(make_pair(fir/2.0,sec/2.0),mid);//cout<<botr.first<<","<<botr.second<<"  ";
					if(botr.second==(len/2.0-1e-12)){
						lo=mid;
						break;
					} else if(botr.second<(len/2.0-1e-12))
						lo=mid;
					else
						hi=mid;	//	cout<<mid<<"\n";
				}
				pair<double,double>fin=rotate(make_pair(fir/2.0,sec/2.0),lo);
printf("%.8lf->  %d:%d\n",lo,(fin.first<=(wid/2.0-1e-12)),(fin.second<=(len/2.0-1e-12)));
printf("%.8lf,%.8lf\n",fin.first,fin.second);

				if(fin.first<=(wid/2.0-1e-12) && fin.second<=(len/2.0-1e-12))
					ans[all]="YES";
				else
					ans[all]="NO";
				
			}
		}
	}
	return ans;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <string> p2, bool hasAnswer, vector <string> p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p2[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	PackingShapes *obj;
	vector <string> answer;
	obj = new PackingShapes();
	clock_t startTime = clock();
	answer = obj->tryToFit(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p3.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p3[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p3.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p3[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	vector <string> p2;
	vector <string> p3;
/*
	{
	// ----- test 0 -----
	p0 = 100;
	p1 = 100;
	string t2[] = {"RECTANGLE 3 3","RECTANGLE 3 230","RECTANGLE 140 1"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	string t3[] = {"YES","NO","YES"};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 100;
	p1 = 100;
	string t2[] = {"RECTANGLE 100 100","CIRCLE 50"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	string t3[] = {"YES","YES"};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 10;
	p1 = 100;
	string t2[] = {"RECTANGLE 99 9","CIRCLE 22"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	string t3[] = {"YES","NO"};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
*/
	{
	// ----- test 3 -----
	p0 = 170;
	p1 = 900;
	string t2[] = {"RECTANGLE 200 700","RECTANGLE 3 910","RECTANGLE 1000 7","CIRCLE 5","CIRCLE 50","CIRCLE 500","RECTANGLE 1000 99"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	string t3[] = {"NO","YES","NO","YES","YES","NO","NO"};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
