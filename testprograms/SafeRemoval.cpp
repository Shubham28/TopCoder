#include <algorithm>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <vector>
#include <map>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define MEM(A,B) memset(A,B,sizeof(A))
#define SZ(A) int(A.size())
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define VI vector<int>
#define VS vector<string>
#define LL long long

using namespace std;

class SafeRemoval {
public:
	int removeThem(vector <int>, int);

	int k;
	int S,ini,L;
	map<int, VI >remn;
	map<int, VI >prefx;

	int mxSm[52][52][52];

	int calBest(int on, int tw, int thr) {
		int &tmp=mxSm[on][tw][thr];
		if(tmp!=0)
			return tmp;

		tmp=-1;
		if(on+tw+thr>k || on>SZ(remn[1]) || tw>SZ(remn[2]) || thr>SZ(remn[3]))
			return tmp;

		int zr=k-on-tw-thr;
		int now=(4+ini-(on+tw*2+thr*3)%4)%4;

		if(0<=zr && zr<=SZ(remn[0]) && now%4){
			int tot=S;
			tot-=((zr)?prefx[0][zr-1]:0);
			tot-=((on)?prefx[1][on-1]:0);
			tot-=((tw)?prefx[2][tw-1]:0);
			tot-=((thr)?prefx[3][thr-1]:0);
			tmp>?=tot;
		}

		if((now+3)%4)		tmp>?=calBest(on+1,tw,thr);
		if((now+2)%4)		tmp>?=calBest(on,tw+1,thr);
		if((now+1)%4)		tmp>?=calBest(on,tw,thr+1);

		return tmp;
	}

};

int SafeRemoval::removeThem(vector <int> seq, int k_) {
	S=accumulate(ALL(seq),0);
	ini=S%4;
	L=SZ(seq),k=k_;

	SORT(seq);
	FOR(i,0,L)
		PB(remn[seq[i]%4],seq[i]);

	for(map<int,VI >::iterator it=remn.begin();it!=remn.end();it++){
		int tmp=0;
		FOR(i,0,SZ((*it).second)){
			tmp+=(*it).second[i];
			PB(prefx[(*it).first],tmp);
		}
	}

	MEM(mxSm,0);
	return calBest(0,0,0);
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	SafeRemoval *obj;
	int answer;
	obj = new SafeRemoval();
	clock_t startTime = clock();
	answer = obj->removeThem(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {3,8,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 11;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1,1,1,1,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = -1;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {1,6,1,10,1,2,7,11};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6;
	p2 = 21;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {1,1,1,1,1,1,1,1,7};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = 6;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {951,907,995,991,923,918,995,951,937,922,998,991,975,986,931,909,998,927,927,931,959,997,906,905,903,997,951,977,971,927,967,957,955,951,966,935,925,961,921,942,957,975,971,949,933};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 44;
	p2 = 998;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
