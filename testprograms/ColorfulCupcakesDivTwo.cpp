#include <algorithm>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <vector>
#include <map>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define MEM(A,B) memset(A,B,sizeof(A))
#define SZ(A) int(A.size())
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define VI vector<int>
#define VS vector<string>
#define LL long long

using namespace std;

const LL MOD=1000000007;

class ColorfulCupcakesDivTwo {
public:
	int countArrangements(string);
};

//	Can be optimized & converted to recursive; Storing position is redundant

int ColorfulCupcakesDivTwo::countArrangements(string cup) {
	int N=SZ(cup);

	int frq[3];
	FOR(l,0,3)
		frq[l]=count(ALL(cup),'A'+l);

	//	State: Position, 'A' remaining, 'B' remaining, 'C' remaining, 1st position color, last color used
	LL ways[2][frq[0]+1][frq[1]+1][frq[2]+1][3][3];
	MEM(ways,0);

	FOR(lst,0,3)		FOR(fir,0,3)
		if(lst!=fir)
			ways[N&1][0][0][0][lst][fir]=1;

	RFOR(ps,N-1,1){
		bool now=ps&1,nxt=(ps+1)&1;
		MEM(ways[now],0);

		EFOR(a,0,frq[0])		EFOR(b,0,frq[1])		EFOR(c,0,frq[2])
			FOR(fir,0,3)	FOR(lst,0,3){
				if((a+b+c)!=(N-ps))
					continue;

				LL &tmp=ways[now][a][b][c][fir][lst];

				if(lst!=0 && a>0)
					tmp=(tmp+ways[nxt][a-1][b][c][0][fir])%MOD;

				if(lst!=1 && b>0)
					tmp=(tmp+ways[nxt][a][b-1][c][1][fir])%MOD;

				if(lst!=2 && c>0)
					tmp=(tmp+ways[nxt][a][b][c-1][2][fir])%MOD;
			}
	}

	LL ans=0;
	if(frq[0])
		ans=(ans+ways[1][frq[0]-1][frq[1]][frq[2]][0][0])%MOD;
	if(frq[1])
		ans=(ans+ways[1][frq[0]][frq[1]-1][frq[2]][1][1])%MOD;
	if(frq[2])
		ans=(ans+ways[1][frq[0]][frq[1]][frq[2]-1][2][2])%MOD;

	return int(ans);
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	ColorfulCupcakesDivTwo *obj;
	int answer;
	obj = new ColorfulCupcakesDivTwo();
	clock_t startTime = clock();
	answer = obj->countArrangements(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;

	{
	// ----- test 0 -----
	p0 = "ABAB";
	p1 = 2;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = "ABABA";
	p1 = 0;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = "ABC";
	p1 = 6;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = "ABABABABABABABABABABABABABABABABABABABABABABABABAB";
	p1 = 2;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = "BCBABBACBABABCCCCCAABBAACBBBBCBCAAA";
	p1 = 741380640;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
