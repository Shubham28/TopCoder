#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define MEM(A,B) memset(A,B,sizeof(A))
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define MP(A,B) make_pair(A,B)
#define LL long long

using namespace std;

class NumberLabyrinthDiv2 {
public:
	int getMinimumNumberOfMoves(vector <string>, int, int, int, int, int);
};

int NumberLabyrinthDiv2::getMinimumNumberOfMoves(vector <string> board, int r1, int c1, int r2, int c2, int K) {
	int dist[51][51][51];
	int grd[51][51];
	int R=SZ(board),C=SZ(board[0]);
	int dr[]={-1,0,0,1};
	int dc[]={0,-1,1,0};

	FOR(r,0,R)		FOR(c,0,C)
		grd[r][c]=board[r][c]-'0';

	MEM(dist,-1);

	queue<int>brd;
	brd.push(r1);	brd.push(c1);	brd.push(0);
	dist[r1][c1][0]=0;

	while(!brd.empty()){
		int rw=brd.front();		brd.pop();
		int cl=brd.front();		brd.pop();
		int chng=brd.front();	brd.pop();

		if(rw==r2 && cl==c2)	return dist[rw][cl][chng];
		if(grd[rw][cl]==0)		continue;

		FOR(m,0,4){
			if(0<grd[rw][cl] && grd[rw][cl]<=9){
				int tr=rw+grd[rw][cl]*m[dr],tc=cl+grd[rw][cl]*m[dc];

				if(0<=tr && tr<R && 0<=tc && tc<C && dist[tr][tc][chng]==-1){
					brd.push(tr);	brd.push(tc);	brd.push(chng);
					dist[tr][tc][chng]=dist[rw][cl][chng]+1;
				}
			} else {
				if(chng==K)		continue;

				EFOR(st,1,9){
					int tr=rw+st*m[dr],tc=cl+st*m[dc];

					if(0<=tr && tr<R && 0<=tc && tc<C && dist[tr][tc][chng+1]==-1){
						brd.push(tr);	brd.push(tc);	brd.push(chng+1);
						dist[tr][tc][chng+1]=dist[rw][cl][chng]+1;
					}
				}
			}
		}
	}
	return -1;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, int p2, int p3, int p4, int p5, bool hasAnswer, int p6) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1 << "," << p2 << "," << p3 << "," << p4 << "," << p5;
	cout << "]" << endl;
	NumberLabyrinthDiv2 *obj;
	int answer;
	obj = new NumberLabyrinthDiv2();
	clock_t startTime = clock();
	answer = obj->getMinimumNumberOfMoves(p0, p1, p2, p3, p4, p5);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p6 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p6;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	int p2;
	int p3;
	int p4;
	int p5;
	int p6;
	
	{
	// ----- test 0 -----
	string t0[] = {"...2","....","3..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 0;
	p3 = 2;
	p4 = 3;
	p5 = 0;
	p6 = -1;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"...2","....","3..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 0;
	p3 = 2;
	p4 = 3;
	p5 = 1;
	p6 = 2;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"...3","....","2..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 0;
	p3 = 2;
	p4 = 3;
	p5 = 3;
	p6 = 3;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"55255",".0.0.","..9..","..3..","3.9.3","44.44"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = 2;
	p3 = 4;
	p4 = 2;
	p5 = 10;
	p6 = 6;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"920909949","900020000","009019039","190299149","999990319","940229120","000409399","999119320","009939999"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 7;
	p2 = 3;
	p3 = 1;
	p4 = 1;
	p5 = 50;
	p6 = 10;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"21.53...","...05445","433354.1","5..54.11","..4.114.",".05340.."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = 0;
	p3 = 2;
	p4 = 0;
	p5 = 6;
	p6 = 4;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	string t0[] = {
			"....","..................................................","..................................................","..................................................","..................................................","..................................................","..................................................","..................................................","..................................................","..................................................","..................................................","..................................................","..................................................","..................................................","..................................................","..................................................","..................................................","..................................................","..................................................","........................................"
			};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 0;
	p3 = 49;
	p4 = 49;
	p5 = 50;
	p6 = 12;
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	string t0[] = {"49.18846913023488.09377.","2943667.250.2430780.0468","575.31.7.3.5.540.6.2.226",".36.9083921.507357.31450",".42.8777.168331.54.0473.","12346856197.515420056160","550.13.58193.39125.776..","616.4.2962986703..6.25.6","..04315.2.06.244421..328","1.5533.021772.65.609.723","9338875.5.4833.865286823","3312.4669935592.98810896","2.28940272666.22.5731.3.","70199.3..57..71897149376","93..41.02090....65852.2.","53519..74868.58357356132","909....3137.466.10627470","..761.8..4.84.0619772156","3...55.52605594221.9.242","..93.294364.0343.4.42295","5.141582555793.1.20.8447","810.5.5..82.20177815.28.","48.114.97090.3..020223.9",".21.490.40.74.4..2..6..6","1..41.0214480487591987.7","..75.70.5.58.701.4.18680","4..089978515.1662.418446","8473.4445360.297..290852","99640..84703049772997534","2525399.525744480501...8","1748.9144697278..2436.07","50.3.7.114.31295871.1.90","0338152661.79...3946.2.8","9170.40176...15633112.26"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 31;
	p2 = 21;
	p3 = 1;
	p4 = 0;
	p5 = 2;
	p6 = 8;
	all_right = KawigiEdit_RunTest(7, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}

	{
	// ----- test 8 -----
	string t0[] = {"4696395.74..67..244208..01180.84992.30.2.6.9.190","652..0..847877522.65..834..2.63....2..15.06983..","2.72805..9651994.56...9.0780....6966.3.0.2.637.2"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 46;
	p3 = 0;
	p4 = 5;
	p5 = 3;
	p6 = 10;
	all_right = KawigiEdit_RunTest(8, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
