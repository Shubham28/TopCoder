#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <numeric>
 
#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define MEM(A,B) memset(A,B,sizeof(A))
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long
 
using namespace std;

#define N 1000200

int prlen;
unsigned int prime[N/64],prnum[79000];

#define gP(n) (prime[n>>6]&(1<<((n>>1)&31)))
#define rP(n) (prime[n>>6]&=~(1<<((n>>1)&31)))

void sieve()
{
    memset(prime,-1,sizeof(prime));

    unsigned int i;
    unsigned int sqrtN=(unsigned int)sqrt((double)N)+1;

    for(i=3;i<sqrtN;i+=2)
		if(gP(i)){
	        unsigned int i2=i+i;
		    for(unsigned int j=i*i;j<N;j+=i2) rP(j);
		}

	return;
}

class DivideAndShift {
public:
	int getLeast(int,int);
	
};

int DivideAndShift:: getLeast(int L, int M) {
	if(M==1)	return 0;

	prlen=0;
	prnum[prlen++]=2;
	sieve();

	EFOR(all,3,N)
		if( (all&1) && gP(all) )
			prnum[prlen++]=all;

	int fact[25];
	int tot=0;

	int cp=L;
	FOR(a,0,prlen)
		if(cp%prnum[a]==0){
				while(cp%prnum[a]==0){
					fact[tot++]=prnum[a];
					cp/=prnum[a];
				}
			}

	if(cp!=1)
		fact[tot++]=cp;

	int ret=L;
	FOR(all,0,1<<tot){
		int divd=1;

		FOR(mask,0,tot)
			if(all&(1<<mask))
				divd*=fact[mask];

		int len=L/divd;
		int chk=M%len;
		if(chk==0)
			chk=(len==1)?1:len;

		int lft=chk-1;
		int rt=(abs(len-chk)+1);

		ret<?=(__builtin_popcount(all)+(lft<?rt));
	}

	return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	DivideAndShift *obj;
	int answer;
	obj = new DivideAndShift();
	clock_t startTime = clock();
	answer = obj->getLeast(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 56;
	p1 = 14;
	p2 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 49;
	p1 = 5;
	p2 = 2;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 256;
	p1 = 7;
	p2 = 6;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 6;
	p1 = 1;
	p2 = 0;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 77777;
	p1 = 11111;
	p2 = 2;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 6;
	p1 = 4;
	p2 = 1;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = 6;
	p1 = 3;
	p2 = 1;
	all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	p0 = 8;
	p1 = 4;
	p2 = 2;
	all_right = KawigiEdit_RunTest(7, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 8 -----
	p0 = 256;
	p1 = 255;
	p2 = 2;
	all_right = KawigiEdit_RunTest(8, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
