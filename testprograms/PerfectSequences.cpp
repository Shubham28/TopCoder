#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define MEM(A,B) memset(A,B,sizeof(A))
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long

using namespace std;

//	http://www-users.mat.umk.pl/~anow/ps-dvi/si-krl-a.pdf

class PerfectSequences {
public:
	string fixIt(vector <int>);

	int N;
	string calOpt(VI &seq,int pos) {
		LL S=0,Pr=1;

		FOR(a,0,N)
			if(a!=pos)
				S+=seq[a],Pr*=seq[a];

		if(Pr>=S){
			if(Pr==(S+1) && seq[pos]!=1)
				return "Yes";
			if(Pr==S && S==2 && seq[pos]!=2)
				return "Yes";
			return "No";
		} else{
			int lo=1,hi=1000000000;
			while(lo<=hi){
				int mid=lo+(hi-lo)/2;

				LL nwS=mid+S,nwP=mid*Pr;
				if(nwS==nwP)
					return (mid==seq[pos])?"No":"Yes";

				if(nwP>nwS)
					hi=mid-1;
				else
					lo=mid+1;
			}
			return "No";
		}
	}
};

string PerfectSequences::fixIt(vector <int> seq) {
	N=SZ(seq);

	if(N==1)		return "Yes";

	int cntZ=0;
	FOR(a,0,N)
		cntZ+=(seq[a]==0);

	if(cntZ>1){
		if((N-cntZ)==1)			return "Yes";
		else		return "No";
	}

	if(cntZ==1){
		if(N==2)
			return "Yes";

		int ind=find(ALL(seq),0)-seq.begin();
		return calOpt(seq,ind);
	}

	bool ans=0;
	FOR(a,0,N)
		ans|=(calOpt(seq,a)=="Yes");

	return (ans?"Yes":"No");
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	PerfectSequences *obj;
	string answer;
	obj = new PerfectSequences();
	clock_t startTime = clock();
	answer = obj->fixIt(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	string p1;
	
	{
	// ----- test 0 -----
	int t0[] = {1,3,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Yes";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1,2,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "No";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {1,4,2,4,2,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "No";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {1000000,1,1,1,1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Yes";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {8};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Yes";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {2,0,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "No";
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	int t0[] = {0,1000000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Yes";
	all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
