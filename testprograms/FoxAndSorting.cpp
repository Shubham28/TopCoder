#include <algorithm>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <vector>
#include <map>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define MEM(A,B) memset(A,B,sizeof(A))
#define SZ(A) int(A.size())
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define VI vector<int>
#define VS vector<string>
#define LL long long
//	00000000100000000
using namespace std;

class FoxAndSorting {
public:
	long long get(long long);
	int S;
	LL cnt[19][155];
	char nm[19];

	LL calNum(int pos,int sm,LL idx) {
		if(pos==17){
			LL ret=0;
			FOR(a,0,17)
				ret=ret*10+(nm[a]-'0');
			return (ret*10+(S-sm));
		}

		LL tot=0;
		EFOR(i,0,((S-sm)<?9)){
			LL tmp=cnt[pos+1][sm+i];
			if(tmp+tot<idx)
				tot+=tmp;
			else {
				nm[pos]='0'+i;
				return calNum(pos+1,sm+i,idx-tot);
			}
		}
	}

	LL cntWay(int pos,int sm) {
		if(pos==18)
			return (sm==S);

		LL &tmp=cnt[pos][sm];
		if(tmp!=-1)
			return tmp;

		tmp=0;
		EFOR(i,0,((S-sm)<?9))
			tmp+=cntWay(pos+1,sm+i);

		return tmp;
	}
};

long long FoxAndSorting::get(long long idx) {
	LL tot=0;
	EFOR(sm,0,9*18){
		S=sm;
		MEM(cnt,-1);
		LL ways=cntWay(0,0);

		if(tot+ways<idx)
			tot+=ways;
		else 
			return calNum(0,0,idx-tot);
	}
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, long long p0, bool hasAnswer, long long p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	FoxAndSorting *obj;
	long long answer;
	obj = new FoxAndSorting();
	clock_t startTime = clock();
	answer = obj->get(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	long long p0;
	long long p1;
	
	{
	// ----- test 0 -----
	p0 = 10ll;
	p1 = 100000000ll;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 1000000000000000000ll;
	p1 = 999999999999999999ll;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 58ll;
	p1 = 100000000100ll;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 314159265358979ll;
	p1 = 646003042230121105ll;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 271828182845904523ll;
	p1 = 132558071125756493ll;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 1ll;
	p1 = 0ll;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = 2ll;
	p1 = 1ll;
	all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	p0 = 6ll;
	p1 = 10000ll;
	all_right = KawigiEdit_RunTest(7, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
