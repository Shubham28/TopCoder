#include <algorithm>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <vector>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define MEM(A,B) memset(A,B,sizeof(A))
#define SZ(A) int(A.size())
#define VI vector<int>
#define ULL unsigned long long

using namespace std;

class FoxPaintingBalls {
public:
	long long theMax(long long, long long, long long, int);
};

long long FoxPaintingBalls::theMax(long long R, long long G, long long B, int N) {
	if(N==1)
		return R+G+B;

	ULL tot=((ULL)N*(N+1)/2)/3;
	ULL colr[]={R,G,B};
	sort(colr,colr+3);

	if(N%3==1){
		ULL lo=0,hi=colr[0];
		while(lo<hi){
			ULL ret=lo+(hi-lo+1)/2;

			if(colr[0]/tot>=ret && colr[0]+colr[1]+colr[2]-3*tot*ret>=ret)
				lo=ret;
			else
				hi=ret-1;
		}
		return lo;
	} else 
		return colr[0]/tot;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, long long p0, long long p1, long long p2, int p3, bool hasAnswer, long long p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	FoxPaintingBalls *obj;
	long long answer;
	obj = new FoxPaintingBalls();
	clock_t startTime = clock();
	answer = obj->theMax(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	long long p0;
	long long p1;
	long long p2;
	int p3;
	long long p4;
	
	{
	// ----- test 0 -----
	p0 = 2ll;
	p1 = 2ll;
	p2 = 2ll;
	p3 = 3;
	p4 = 1ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 1ll;
	p1 = 2ll;
	p2 = 3ll;
	p3 = 3;
	p4 = 0ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 8ll;
	p1 = 6ll;
	p2 = 6ll;
	p3 = 4;
	p4 = 2ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 7ll;
	p1 = 6ll;
	p2 = 7ll;
	p3 = 4;
	p4 = 2ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 100ll;
	p1 = 100ll;
	p2 = 100ll;
	p3 = 4;
	p4 = 30ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 19330428391852493ll;
	p1 = 48815737582834113ll;
	p2 = 11451481019198930ll;
	p3 = 3456;
	p4 = 5750952686ll;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = 1ll;
	p1 = 1ll;
	p2 = 1ll;
	p3 = 1;
	p4 = 3ll;
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	p0 = 434532807763425372ll;
	p1 = 912245252707409536ll;
	p2 = 721365743254593093ll;
	p3 = 31414801;
	p4 = 2641ll;
	all_right = KawigiEdit_RunTest(7, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 8 -----
	p0 = 972188503299304012ll;
	p1 = 409126227317276821ll;
	p2 = 995258269701504023ll;
	p3 = 49615093;
	p4 = 997ll;
	all_right = KawigiEdit_RunTest(8, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
