#include <algorithm>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <vector>
#include <sstream>
#include <map>
#include <queue>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define MEM(A,B) memset(A,B,sizeof(A))
#define SZ(A) int(A.size())
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define LL long long

using namespace std;

class TurtleSpy {
public:
	double maxDistance(vector <string>);
};

double TurtleSpy::maxDistance(vector <string> com) {
	int N=SZ(com);
	double fw=0,bk=0;
	VI ang;

	int val;
	char tmp[10];
	FOR(c,0,N){
		sscanf(com[c].c_str(),"%s%d",tmp,&val);

		string inp(tmp);
		if(inp=="forward")
			fw+=val;
		else if(inp=="backward")
			bk+=val;
		else if(inp=="right"){
			PB(ang,val);
		} else
			PB(ang,360-val);
	}

	int L=SZ(ang);
	bool dp[51][360];
	MEM(dp,0);
	dp[0][0]=1;

	EFOR(t,1,L)
		FOR(x,0,360){
			dp[t][x]=dp[t-1][x];
			if(!dp[t][x])
				dp[t][x]=dp[t-1][(360+x-ang[t-1])%360];
		}

	double maxDist=0;
	FOR(a,0,360)
		if(dp[L][a]){
			double dist=sqrt(fw*fw + bk*bk - 2*fw*bk*cos(a*3.141592653589/180.));
			maxDist>?=dist;
		}

	return maxDist;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, double p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	TurtleSpy *obj;
	double answer;
	obj = new TurtleSpy();
	clock_t startTime = clock();
	answer = obj->maxDistance(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p1 - answer) <= 1e-9 * max(1.0, fabs(p1));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	double p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"forward 100","backward 100","left 90"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 141.4213562373095;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"left 45","forward 100","right 45","forward 100"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 200.0;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"left 10","forward 40","right 30","left 10","backward 4","forward 4"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 40.58520737741619;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
