#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long

using namespace std;

class MatchMaking {
public:
	string makeMatch(vector <string>, vector <string>, vector <string>, vector <string>, string);
};

string MatchMaking::makeMatch(vector <string> namew, vector <string> answ, vector <string> namem, vector <string> ansm, string quer) {
	map<string,string>ans;
	int N=SZ(namew);
	FOR(i,0,N)
		FOR(j,i+1,N)
			if(namew[i]>namew[j])
				swap(namew[i],namew[j]),swap(answ[i],answ[j]);

	FOR(i,0,N)
		FOR(j,i+1,N)
			if(namem[i]>namem[j])
				swap(namem[i],namem[j]),swap(ansm[i],ansm[j]);

	bool done[N+1];
	memset(done,0,sizeof(done));

	FOR(all,0,N){
		int pos,best=-1;
		for(int chk=0;chk<N;chk++){
			if(done[chk]==1)
				continue;

			int tmp=0;
			FOR(mat,0,SZ(answ[all]))
				if(answ[all][mat]==ansm[chk][mat])
					++tmp;

			if(tmp>best)
				best=tmp,pos=chk;
		}
		ans[namew[all]]=namem[pos];
		done[pos]=true;
	}
	return ans[quer];
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, vector <string> p2, vector <string> p3, string p4, bool hasAnswer, string p5) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p2[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p3[i] << "\"";
	}
	cout << "}" << "," << "\"" << p4 << "\"";
	cout << "]" << endl;
	MatchMaking *obj;
	string answer;
	obj = new MatchMaking();
	clock_t startTime = clock();
	answer = obj->makeMatch(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p5 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p5;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	vector <string> p2;
	vector <string> p3;
	string p4;
	string p5;
	
	{
	// ----- test 0 -----
	string t0[] = {"Constance","Bertha","Alice"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"aaba","baab","aaaa"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"Chip","Biff","Abe"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	string t3[] = {"bbaa","baaa","aaab"};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = "Bertha";
	p5 = "Biff";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"Constance","Bertha","Alice"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"aaba","baab","aaaa"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"Chip","Biff","Abe"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	string t3[] = {"bbaa","baaa","aaab"};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = "Constance";
	p5 = "Chip";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"Constance","Alice","Bertha","Delilah","Emily"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"baabaa","ababab","aaabbb","bababa","baabba"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"Ed","Duff","Chip","Abe","Biff"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	string t3[] = {"aabaab","babbab","bbbaaa","abbbba","abaaba"};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = "Constance";
	p5 = "Duff";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"Constance","Alice","Bertha","Delilah","Emily"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"baabaa","ababab","aaabbb","bababa","baabba"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"Ed","Duff","Chip","Abe","Biff"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	string t3[] = {"aabaab","babbab","bbbaaa","abbbba","abaaba"};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = "Delilah";
	p5 = "Chip";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"Constance","Alice","Bertha","Delilah","Emily"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"baabaa","ababab","aaabbb","bababa","baabba"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"Ed","Duff","Chip","Abe","Biff"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	string t3[] = {"aabaab","babbab","bbbaaa","abbbba","abaaba"};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = "Emily";
	p5 = "Ed";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"anne","Zoe"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"a","a"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"bob","chuck"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	string t3[] = {"a","a"};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = "Zoe";
	p5 = "bob";
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	string t0[] = {"F","M","S","h","q","g","r","N","U","x","H","P","o","E","R","z","L","m","e","u","K","A","w","Q","O","v","j","a","t","p","C","G","k","c","V","B","D","s","n","i","f","T","I","l","d","J","y","b"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"abaabbbb","bbaabbbb","aaabaaab","aabbaaaa","baabbaab","aaababba","bbabbbbb","bbbabbba","aaabbbba","aabbbaaa","abbabaaa","babbabbb","aaaaabba","aaaabbaa","abbbabaa","babababa","abbaaaaa","bbababba","baaaaaba","baaaaabb","bbbbabba","ababbaaa","abbbabab","baabbbaa","bbbaabbb","aababbab","ababbabb","abbaabba","baabbabb","aaabaaab","aabbbaba","aabaaabb","abababba","aabbaaaa","aabbabaa","bababaaa","aabaaaab","bbbbaabb","baaababb","abaabbab","aabbbaaa","baabbaba","bbabbbaa","aabbbbaa","abbbaaab","abababbb","ababaaba","bababaaa"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"f","C","v","g","Q","z","n","c","B","o","M","F","u","x","I","T","K","L","E","U","w","A","d","t","e","R","D","s","p","q","m","r","H","j","J","V","l","a","k","h","G","y","i","P","O","N","b","S"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	string t3[] = {"bbbaabab","bbabaabb","ababbbbb","bbbababb","baababaa","bbaaabab","abbabbaa","bbbabbbb","aabbabab","abbababa","aababbbb","bababaab","aaababbb","baabbaba","abaaaaab","bbaababa","babaabab","abbabbba","ababbbab","baabbbab","babbaaab","abbbbaba","bbabbbba","baaabaab","ababbabb","abbbaabb","bbbbaabb","bbbaaabb","baabbaba","bbabaaab","aabbbaab","abbbbabb","bbaaaaba","bbbababa","abbaabba","bababbbb","aabaaabb","babbabab","baaaabaa","ababbaba","aaabaabb","bbaaabaa","baaaaabb","bbaabaab","bbababab","aabaaaab","aaaaabab","aabbaaba"};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = "U";
	p5 = "x";
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	string t0[] = {"q","M","w","y","p","N","s","r","a","H","o","n","F","m","l","b","D","j","C","u","f","I","g","L","i","x","A","G","O","k","h","d","c","E","B","v","J","z","K","e","t"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"aabbaaabb","baabababb","bbaababba","bbbaaaaaa","abaaaabaa","bababbbab","abbaabbaa","aabababbb","bababaaaa","abbababaa","aabbbbbba","bbabbabab","babaabbba","babbabbbb","baaabbbbb","baaabaaaa","aaabbaaab","abbaabbbb","abbabbbab","bbaaaabba","babbaaabb","aabbabbab","baaababba","ababaabab","bbbaabbab","aaaabbabb","babaaaaaa","abbbbaaab","aabaaabba","bbbaaaaba","bbbbbbaab","aabbaaabb","aabaabbab","aababaaba","bbabbbbab","abbabaaab","babaaabbb","bababbaaa","aabbaabaa","baaabbabb","bbbbbbbbb"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"m","k","n","q","L","E","M","l","w","x","g","e","i","z","F","r","a","h","f","D","J","K","j","v","A","t","N","y","s","c","o","p","d","b","B","G","O","I","u","C","H"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	string t3[] = {"bbaaabbba","bbaaaaaab","abaaababb","baaaabbbb","abbbababa","baaaaaaaa","aabbbbbab","aaaaabbba","baabababb","babaaabab","baaababaa","bbbbaabba","bbaabbabb","bbaaababb","abbabbaba","aababaaab","abbbbbbaa","aabbaabaa","bbbaabbba","abbabbaba","aaabbbaaa","bbaabaaaa","aabababbb","abbbbabab","baaabbbba","bababbbba","aababbaab","bbaabbaab","bbbaaabbb","babbbbabb","ababababb","babaaabab","bbaaaaaba","aaaaabaaa","abbaaabbb","bbbbababb","baabababb","bbaabaaaa","aaababbbb","abbbbbbba","bbaabbaaa"};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = "o";
	p5 = "C";
	all_right = KawigiEdit_RunTest(7, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
