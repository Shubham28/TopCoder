#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long

using namespace std;

class HairCuts {
public:
	double maxCut(vector <string>, string);
	int N,fin;
	VI tot;

	int caltime(string clk) {
		int hrs=atoi(clk.substr(0,2).c_str());
		if(hrs<9)
			hrs+=12;
		int min=atoi(clk.substr(3,2).c_str());

		return hrs*60+min;
	}

	bool notpos(double lngst) {
		double prs=tot[0]+lngst;
		FOR(rem,1,N){
			if(prs>=tot[rem])
				prs+=lngst;
			else
				prs=tot[rem]+lngst;
		}
		return (prs<fin);
	}
};

double HairCuts::maxCut(vector <string> enter, string last) {
	N=SZ(enter);
	tot.assign(N,0);

	FOR(all,0,N)
		tot[all]=caltime(enter[all]);
	SORT(tot);

	fin=caltime(last);

	RFOR(chk,N-1,0){
		if((fin-tot[chk])<5*(N-chk))
			return -1;
	}

	double low=5.0,high=fin;
	while((high-low)>1e-10){
		double mid=low+(high-low)/2.0;

		bool chk=notpos(mid);
		if(chk)
			low=mid;
		else
			high=mid;
	}
	return low;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, string p1, bool hasAnswer, double p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	HairCuts *obj;
	double answer;
	obj = new HairCuts();
	clock_t startTime = clock();
	answer = obj->maxCut(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	string p1;
	double p2;

	{
	// ----- test 0 -----
	string t0[] = {"04:22","09:00"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "05:52";
	p2 = 90.0;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	string t0[] = {"09:00","09:22","09:22"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "10:11";
	p2 = 23.666666666666863;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {"09:00","04:00","04:02"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "04:09";
	p2 = -1.0;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	string t0[] = {"04:40","10:54","12:30","03:46","04:48","01:57","04:47","10:29","10:39"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "05:21";
	p2 = 13.6666666666669;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
