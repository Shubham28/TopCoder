#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <set>
#include <numeric>

#define FOR(A,B,C) for(int A=B;A<C;A++)
#define EFOR(A,B,C) for(int A=B;A<=C;A++)
#define RFOR(A,B,C) for(int A=B;A>=C;A--)
#define PB(A,B) A.push_back(B);
#define SORT(A) sort( A.begin(),A.end() )
#define ALL(A) A.begin(),A.end()
#define MEM(A,B) memset(A,B,sizeof(A))
#define VI vector<int>
#define VS vector<string>
#define VD vector<double>
#define VB vector<bool>
#define SZ(A) int(A.size())
#define LL long long

using namespace std;

class bloggoHyphenate {
public:
	vector <string> correct(vector <string>, vector <string>);

	bool posit(string &orig,string &chng) {
		int belw=0;
		FOR(pos,0,SZ(orig)){
			if(orig[pos]==' ' && chng[belw]=='-')	++belw;
			else if(orig[pos]==' ')		continue;
			else if(orig[pos]==chng[belw])		++belw;
			else 	return 0;
		}
		if(belw==SZ(chng))		return 1;
		return 0;
	}
};

vector <string> bloggoHyphenate::correct(vector <string> dict, vector <string> cand) {
	int N=SZ(dict),T=SZ(cand);
	VS word(N);

	FOR(all,0,N){
		string use=dict[all];
		remove(ALL(use),' ');
		use.resize(SZ(dict[all])-count(ALL(dict[all]),' '));
		word[all]=use;
	}

	VS ret(T);
	FOR(chk,0,T){
		string mat=cand[chk];
		remove(ALL(mat),'-');
		mat.resize(SZ(cand[chk])-1);

		int ind=find(ALL(word),mat)-word.begin();

		if(find(ALL(dict[ind]),' ')==dict[ind].end())		ret[chk]=dict[ind];
		else {
			int dsh=find(ALL(cand[chk]),'-')-cand[chk].begin();

			EFOR(mov,0,51){
				string prs=cand[chk];

				if(dsh-mov>=0){
					RFOR(lf,dsh,dsh+1-mov)		swap(prs[lf],prs[lf-1]);

					if(posit(dict[ind],prs)){
						if(mov==0)		ret[chk]="correct";
						else		ret[chk]=prs;
						break;
					}
				}

				prs=cand[chk];
				if(dsh+mov<SZ(cand[chk])){
					FOR(rt,dsh,dsh+mov)		swap(prs[rt],prs[rt+1]);

					if(posit(dict[ind],prs)){
						ret[chk]=prs;
						break;
					}
				}
			}
		}
	}
	return ret;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, bool hasAnswer, vector <string> p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	bloggoHyphenate *obj;
	vector <string> answer;
	obj = new bloggoHyphenate();
	clock_t startTime = clock();
	answer = obj->correct(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p2[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p2[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	vector <string> p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"syl la ble","dic tion a ry","mole"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"mo-le","syl-lable"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"mole","correct"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"syl la ble","dic tion a ry","mole"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"dictio-nary","syll-able"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"diction-ary","syl-lable"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"syl la ble","dic tion a ry","mole"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"dictionary-","-syllable"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"dictiona-ry","syl-lable"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"zsx kd ds jply rf","auca wb ill","kvqm kpd p kqi xpbk j","cqf ccr ewq","srl vu m u d b","h qae qzge","jdn qqjf y","zpa hbr","d uft ctsm qjg","l hgcp ik twuy bsi nlmu iyx","cjjz jn td zg","h bd q hi","obsr kci hjdm h yar zsq q xyr hxb","izq iibd yuh tgx nkq","cjgd wfns","ohc bn duc","pydv a geki s bo avdi wd","zygp gqt p","xq pqqb ufoe","cvm yamq moqj vl zoig w","ahz b lf ixjv d","qpg ven d","m cbxz yf tv djf","kti wacd uvgb kmr ew r","ng tfb unw ndl","qruv ctw a","d hk v pcxh zoxy","etbo wabk","x hxiu n","wp qq u dvpi tclh ac l","f am brs lk uss uyb pg","dtfx h ict if koe jhj","nl shp yeji b rw vrg","bz qfnc u","t ceoy eb ss myoe zaaj z jey","j d uju mb irvu","anmo emjs syam ta bfiy kk","gl ej egla tha jbug","zk u sz raij d","kw lbya atdb pd","no id hqum u wny qcy","phv nv l f oq m","b xup tnq fziw yth sn","pvc hnr oky lzj","ew wtwt gyty s uu pfe kif my","t cw fsau","esk gqtd o yh jbx wed fl z","vvr hqw wo gxwm","lei akz nzz bumb","bc hlmw"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"-duftctsmqjg","-leiakznzzbumb","-xhxiun","-zpahbr","ahzbl-fixjvd","anmo-emjssyamtabfiykk","aucawb-ill","bchlmw-","bxuptnqfziwyth-sn","bzq-fncu","c-vmyamqmoqjvlzoigw","cjg-dwfns","cjjzjn-tdzg","cqfccre-wq","dhkvpcxhzox-y","dtfx-hictifkoejhj","eskgqtdoyhjbx-wedflz","etbowab-k","ewwtwtgytysuupfe-kifmy","fambrslkuss-uybpg","glejegl-athajbug","hbdqhi-","hq-aeqzge","izqiibd-yuhtgxnkq","jd-nqqjfy","jdujumb-irvu","ktiwacduvgbkmr-ewr","kv-qmkpdpkqixpbkj","kwlbya-atdbpd","lhgcpiktwuybsi-nlmuiyx","mcbx-zyftvdjf","ngtf-bunwndl","nlshpyejibrwvrg-","no-idhqumuwnyqcy","o-hcbnduc","obsr-kcihjdmhyarzsqqxyrhxb","ph-vnvlfoqm","pvchnrok-ylzj","pydvageki-sboavdiwd","qpgv-end","qruvctw-a","srlvumu-db","tceoyebssmyo-ezaajzjey","tcwfsau-","vvrhqwwo-gxwm","wpqqudvpit-clhacl","xqpq-qbufoe","zku-szraijd","zsxkddsjp-lyrf","zygpgqt-p"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"d-uftctsmqjg","lei-akznzzbumb","x-hxiun","zpa-hbr","ahzb-lfixjvd","correct","correct","bc-hlmw","correct","bz-qfncu","cvm-yamqmoqjvlzoigw","cjgd-wfns","correct","cqfccr-ewq","dhkvpcxh-zoxy","correct","correct","etbo-wabk","correct","correct","glejegla-thajbug","hbdq-hi","h-qaeqzge","correct","jdn-qqjfy","correct","correct","kvqm-kpdpkqixpbkj","correct","correct","mcbxz-yftvdjf","ngtfb-unwndl","nlshpyejibrw-vrg","correct","ohc-bnduc","correct","phv-nvlfoqm","pvchnroky-lzj","correct","qpg-vend","correct","correct","tceoyebssmyoe-zaajzjey","tcw-fsau","correct","wpqqudvpi-tclhacl","xq-pqqbufoe","correct","zsxkdds-jplyrf","correct"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// Author: Shubham Gupta
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
